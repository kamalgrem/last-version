

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Jul 27 18:00:24 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.31
    29                           ; Generated 13/10/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F877A Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  0087                     	;# 
   162  0088                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  0006                     _PORTB	set	6
   184  0008                     _PORTD	set	8
   185  0019                     _TXREG	set	25
   186  001E                     _ADRESH	set	30
   187  001F                     _ADCON0	set	31
   188  0030                     _RB0	set	48
   189  00C6                     _RX9	set	198
   190  00C4                     _CREN	set	196
   191  00C7                     _SPEN	set	199
   192  00FA                     _GO_nDONE	set	250
   193  0087                     _TRISC	set	135
   194  0089                     _TRISE	set	137
   195  0085                     _TRISA	set	133
   196  0088                     _TRISD	set	136
   197  0086                     _TRISB	set	134
   198  0099                     _SPBRG	set	153
   199  009E                     _ADRESL	set	158
   200  009F                     _ADCON1	set	159
   201  04C6                     _TX9	set	1222
   202  04C5                     _TXEN	set	1221
   203  04C4                     _SYNC	set	1220
   204  04C2                     _BRGH	set	1218
   205  043F                     _TRISC7	set	1087
   206  043E                     _TRISC6	set	1086
   207                           
   208                           	psect	cinit
   209  07ED                     start_initialization:	
   210                           ; #config settings
   211                           
   212  07ED                     __initialization:
   213                           
   214                           ; Clear objects allocated to BANK0
   215  07ED  1383               	bcf	3,7	;select IRP bank0
   216  07EE  3020               	movlw	low __pbssBANK0
   217  07EF  0084               	movwf	4
   218  07F0  3044               	movlw	low (__pbssBANK0+36)
   219  07F1  120A  118A  21AA  120A  118A  	fcall	clear_ram0
   220                           
   221                           ; Clear objects allocated to BANK1
   222  07F6  30A0               	movlw	low __pbssBANK1
   223  07F7  0084               	movwf	4
   224  07F8  30F0               	movlw	low (__pbssBANK1+80)
   225  07F9  120A  118A  21AA   	fcall	clear_ram0
   226  07FC                     end_of_initialization:	
   227                           ;End of C runtime variable initialization code
   228                           
   229  07FC                     __end_of__initialization:
   230  07FC  0183               	clrf	3
   231  07FD  120A  118A  2DFD   	ljmp	_main	;jump to C main() function
   232                           
   233                           	psect	bssBANK0
   234  0020                     __pbssBANK0:
   235  0020                     _co:
   236  0020                     	ds	4
   237  0024                     _av:
   238  0024                     	ds	4
   239  0028                     _somme:
   240  0028                     	ds	4
   241  002C                     _tension:
   242  002C                     	ds	2
   243  002E                     _courant:
   244  002E                     	ds	2
   245  0030                     _k:
   246  0030                     	ds	2
   247  0032                     _temp:
   248  0032                     	ds	2
   249  0034                     _value:
   250  0034                     	ds	2
   251  0036                     _c:
   252  0036                     	ds	2
   253  0038                     _rpt:
   254  0038                     	ds	2
   255  003A                     _val:
   256  003A                     	ds	2
   257  003C                     _check:
   258  003C                     	ds	1
   259  003D                     _s:
   260  003D                     	ds	1
   261  003E                     _currentL:
   262  003E                     	ds	1
   263  003F                     _currentH:
   264  003F                     	ds	1
   265  0040                     _tempL:
   266  0040                     	ds	1
   267  0041                     _tempH:
   268  0041                     	ds	1
   269  0042                     _tensionH:
   270  0042                     	ds	1
   271  0043                     _tensionL:
   272  0043                     	ds	1
   273                           
   274                           	psect	bssBANK1
   275  00A0                     __pbssBANK1:
   276  00A0                     _data:
   277  00A0                     	ds	60
   278  00DC                     _acc:
   279  00DC                     	ds	20
   280                           
   281                           	psect	clrtext
   282  01AA                     clear_ram0:	
   283                           ;	Called with FSR containing the base address, and
   284                           ;	W with the last address+1
   285                           
   286  01AA  0064               	clrwdt	;clear the watchdog before getting into this loop
   287  01AB                     clrloop0:
   288  01AB  0180               	clrf	0	;clear RAM location pointed to by FSR
   289  01AC  0A84               	incf	4,f	;increment pointer
   290  01AD  0604               	xorwf	4,w	;XOR with final address
   291  01AE  1903               	btfsc	3,2	;have we reached the end yet?
   292  01AF  3400               	retlw	0	;all done for this memory range, return
   293  01B0  0604               	xorwf	4,w	;XOR again to restore value
   294  01B1  29AB               	goto	clrloop0	;do the next byte
   295                           
   296                           	psect	cstackCOMMON
   297  0070                     __pcstackCOMMON:
   298  0070                     ?_ADC_Init:
   299  0070                     ??_ADC_Init:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_Shift:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ??_Shift:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_averge:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ?_Shi:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ??_Shi:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_aver:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_ADC1:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_num:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_ADC2:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ?_ADC3:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_Initialize_UART:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ??_Initialize_UART:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_UART_send_char:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ??_UART_send_char:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_main:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_ADC_Read:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_ADC_Read1:	
   351                           ; 2 bytes @ 0x0
   352                           
   353  0070                     ?___lldiv:	
   354                           ; 2 bytes @ 0x0
   355                           
   356  0070                     UART_send_char@bt:	
   357                           ; 4 bytes @ 0x0
   358                           
   359  0070                     ADC_Read@channel:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ADC_Read1@channel:	
   363                           ; 2 bytes @ 0x0
   364                           
   365  0070                     ___lldiv@divisor:	
   366                           ; 2 bytes @ 0x0
   367                           
   368                           
   369                           ; 4 bytes @ 0x0
   370  0070                     	ds	2
   371  0072                     ??_ADC_Read:
   372  0072                     ??_ADC_Read1:	
   373                           ; 1 bytes @ 0x2
   374                           
   375                           
   376                           ; 1 bytes @ 0x2
   377  0072                     	ds	2
   378  0074                     Shift@i:
   379  0074                     Shi@i:	
   380                           ; 2 bytes @ 0x4
   381                           
   382  0074                     ___lldiv@dividend:	
   383                           ; 2 bytes @ 0x4
   384                           
   385                           
   386                           ; 4 bytes @ 0x4
   387  0074                     	ds	4
   388  0078                     ??___lldiv:
   389                           
   390                           ; 1 bytes @ 0x8
   391  0078                     	ds	1
   392  0079                     ___lldiv@quotient:
   393                           
   394                           ; 4 bytes @ 0x9
   395  0079                     	ds	4
   396  007D                     ___lldiv@counter:
   397                           
   398                           ; 1 bytes @ 0xD
   399  007D                     	ds	1
   400                           
   401                           	psect	cstackBANK0
   402  0044                     __pcstackBANK0:
   403  0044                     ??_averge:
   404  0044                     ??_aver:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0044                     ??_num:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0044                     ??_ADC3:	
   411                           ; 1 bytes @ 0x0
   412                           
   413                           
   414                           ; 1 bytes @ 0x0
   415  0044                     	ds	8
   416  004C                     num@i:
   417  004C                     ADC3@i:	
   418                           ; 2 bytes @ 0x8
   419                           
   420                           
   421                           ; 2 bytes @ 0x8
   422  004C                     	ds	3
   423  004F                     averge@i:
   424  004F                     aver@i:	
   425                           ; 2 bytes @ 0xB
   426                           
   427                           
   428                           ; 2 bytes @ 0xB
   429  004F                     	ds	2
   430  0051                     ??_ADC1:
   431  0051                     ??_ADC2:	
   432                           ; 1 bytes @ 0xD
   433                           
   434                           
   435                           ; 1 bytes @ 0xD
   436  0051                     	ds	8
   437  0059                     ADC1@i:
   438                           
   439                           ; 2 bytes @ 0x15
   440  0059                     	ds	2
   441  005B                     ??_main:
   442                           
   443                           ; 1 bytes @ 0x17
   444  005B                     	ds	3
   445                           
   446                           	psect	maintext
   447  05FD                     __pmaintext:	
   448 ;;
   449 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   450 ;;
   451 ;; *************** function _main *****************
   452 ;; Defined at:
   453 ;;		line 264 in file "nb.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : B00/0
   464 ;;		On exit  : 300/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   467 ;;      Params:         0       0       0       0       0
   468 ;;      Locals:         0       0       0       0       0
   469 ;;      Temps:          0       3       0       0       0
   470 ;;      Totals:         0       3       0       0       0
   471 ;;Total ram usage:        3 bytes
   472 ;; Hardware stack levels required when called:    3
   473 ;; This function calls:
   474 ;;		_ADC1
   475 ;;		_ADC2
   476 ;;		_ADC3
   477 ;;		_ADC_Init
   478 ;;		_Initialize_UART
   479 ;;		_UART_send_char
   480 ;; This function is called by:
   481 ;;		Startup code after reset
   482 ;; This function uses a non-reentrant model
   483 ;;
   484                           
   485                           
   486                           ;psect for function _main
   487  05FD                     _main:
   488                           
   489                           ;nb.c: 265: TRISB=0x00;
   490                           
   491                           ;incstack = 0
   492                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   493  05FD  1683               	bsf	3,5	;RP0=1, select bank1
   494  05FE  0186               	clrf	6	;volatile
   495                           
   496                           ;nb.c: 266: TRISD=0x00;
   497  05FF  0188               	clrf	8	;volatile
   498                           
   499                           ;nb.c: 267: TRISA=0xff;
   500  0600  30FF               	movlw	255
   501  0601  0085               	movwf	5	;volatile
   502                           
   503                           ;nb.c: 268: TRISE=0xff;
   504  0602  30FF               	movlw	255
   505  0603  0089               	movwf	9	;volatile
   506                           
   507                           ;nb.c: 269: TRISC=0x00;
   508  0604  0187               	clrf	7	;volatile
   509                           
   510                           ;nb.c: 270: Initialize_UART();
   511  0605  120A  118A  21B2  120A  118A  	fcall	_Initialize_UART
   512                           
   513                           ;nb.c: 271: ADC_Init();
   514  060A  120A  118A  219E  120A  118A  	fcall	_ADC_Init
   515                           
   516                           ;nb.c: 272: _delay((unsigned long)((600)*(4000000/4000.0)));
   517  060F  3004               	movlw	4
   518  0610  1283               	bcf	3,5	;RP0=0, select bank0
   519  0611  1303               	bcf	3,6	;RP1=0, select bank0
   520  0612  00DD               	movwf	??_main+2
   521  0613  300C               	movlw	12
   522  0614  00DC               	movwf	??_main+1
   523  0615  3033               	movlw	51
   524  0616  00DB               	movwf	??_main
   525  0617                     u697:
   526  0617  0BDB               	decfsz	??_main,f
   527  0618  2E17               	goto	u697
   528  0619  0BDC               	decfsz	??_main+1,f
   529  061A  2E17               	goto	u697
   530  061B  0BDD               	decfsz	??_main+2,f
   531  061C  2E17               	goto	u697
   532                           
   533                           ;nb.c: 273: PORTD=0x00;
   534  061D  1283               	bcf	3,5	;RP0=0, select bank0
   535  061E  1303               	bcf	3,6	;RP1=0, select bank0
   536  061F  0188               	clrf	8	;volatile
   537                           
   538                           ;nb.c: 274: PORTB=0x00;
   539  0620  0186               	clrf	6	;volatile
   540  0621                     l1405:
   541                           
   542                           ;nb.c: 276: {;nb.c: 278: for(rpt=0;rpt<5;rpt++)
   543  0621  01B8               	clrf	_rpt
   544  0622  01B9               	clrf	_rpt+1
   545  0623                     l1411:
   546                           
   547                           ;nb.c: 279: {;nb.c: 280: _delay((unsigned long)((50)*(4000000/4000.0)));
   548  0623  3041               	movlw	65
   549  0624  1283               	bcf	3,5	;RP0=0, select bank0
   550  0625  1303               	bcf	3,6	;RP1=0, select bank0
   551  0626  00DC               	movwf	??_main+1
   552  0627  30ED               	movlw	237
   553  0628  00DB               	movwf	??_main
   554  0629                     u707:
   555  0629  0BDB               	decfsz	??_main,f
   556  062A  2E29               	goto	u707
   557  062B  0BDC               	decfsz	??_main+1,f
   558  062C  2E29               	goto	u707
   559  062D  2E2E               	nop2
   560                           
   561                           ;nb.c: 285: s=0;
   562  062E  1283               	bcf	3,5	;RP0=0, select bank0
   563  062F  1303               	bcf	3,6	;RP1=0, select bank0
   564  0630  01BD               	clrf	_s
   565                           
   566                           ;nb.c: 286: ADC3();
   567  0631  120A  118A  2561  120A  118A  	fcall	_ADC3
   568                           
   569                           ;nb.c: 287: _delay((unsigned long)((10)*(4000000/4000.0)));
   570  0636  300D               	movlw	13
   571  0637  1283               	bcf	3,5	;RP0=0, select bank0
   572  0638  1303               	bcf	3,6	;RP1=0, select bank0
   573  0639  00DC               	movwf	??_main+1
   574  063A  30FB               	movlw	251
   575  063B  00DB               	movwf	??_main
   576  063C                     u717:
   577  063C  0BDB               	decfsz	??_main,f
   578  063D  2E3C               	goto	u717
   579  063E  0BDC               	decfsz	??_main+1,f
   580  063F  2E3C               	goto	u717
   581                           
   582                           ;nb.c: 288: UART_send_char('s');
   583  0640  3073               	movlw	115
   584  0641  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   585                           
   586                           ;nb.c: 289: _delay((unsigned long)((10)*(4000000/4000.0)));
   587  0646  300D               	movlw	13
   588  0647  1283               	bcf	3,5	;RP0=0, select bank0
   589  0648  1303               	bcf	3,6	;RP1=0, select bank0
   590  0649  00DC               	movwf	??_main+1
   591  064A  30FB               	movlw	251
   592  064B  00DB               	movwf	??_main
   593  064C                     u727:
   594  064C  0BDB               	decfsz	??_main,f
   595  064D  2E4C               	goto	u727
   596  064E  0BDC               	decfsz	??_main+1,f
   597  064F  2E4C               	goto	u727
   598                           
   599                           ;nb.c: 290: UART_send_char('k');
   600  0650  306B               	movlw	107
   601  0651  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   602                           
   603                           ;nb.c: 292: _delay((unsigned long)((10)*(4000000/4000.0)));
   604  0656  300D               	movlw	13
   605  0657  1283               	bcf	3,5	;RP0=0, select bank0
   606  0658  1303               	bcf	3,6	;RP1=0, select bank0
   607  0659  00DC               	movwf	??_main+1
   608  065A  30FB               	movlw	251
   609  065B  00DB               	movwf	??_main
   610  065C                     u737:
   611  065C  0BDB               	decfsz	??_main,f
   612  065D  2E5C               	goto	u737
   613  065E  0BDC               	decfsz	??_main+1,f
   614  065F  2E5C               	goto	u737
   615                           
   616                           ;nb.c: 293: UART_send_char(tensionL);
   617  0660  1283               	bcf	3,5	;RP0=0, select bank0
   618  0661  1303               	bcf	3,6	;RP1=0, select bank0
   619  0662  0843               	movf	_tensionL,w
   620  0663  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   621                           
   622                           ;nb.c: 297: _delay((unsigned long)((10)*(4000000/4000.0)));
   623  0668  300D               	movlw	13
   624  0669  1283               	bcf	3,5	;RP0=0, select bank0
   625  066A  1303               	bcf	3,6	;RP1=0, select bank0
   626  066B  00DC               	movwf	??_main+1
   627  066C  30FB               	movlw	251
   628  066D  00DB               	movwf	??_main
   629  066E                     u747:
   630  066E  0BDB               	decfsz	??_main,f
   631  066F  2E6E               	goto	u747
   632  0670  0BDC               	decfsz	??_main+1,f
   633  0671  2E6E               	goto	u747
   634                           
   635                           ;nb.c: 298: UART_send_char('k');
   636  0672  306B               	movlw	107
   637  0673  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   638                           
   639                           ;nb.c: 299: _delay((unsigned long)((10)*(4000000/4000.0)));
   640  0678  300D               	movlw	13
   641  0679  1283               	bcf	3,5	;RP0=0, select bank0
   642  067A  1303               	bcf	3,6	;RP1=0, select bank0
   643  067B  00DC               	movwf	??_main+1
   644  067C  30FB               	movlw	251
   645  067D  00DB               	movwf	??_main
   646  067E                     u757:
   647  067E  0BDB               	decfsz	??_main,f
   648  067F  2E7E               	goto	u757
   649  0680  0BDC               	decfsz	??_main+1,f
   650  0681  2E7E               	goto	u757
   651                           
   652                           ;nb.c: 300: UART_send_char('s');
   653  0682  3073               	movlw	115
   654  0683  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   655                           
   656                           ;nb.c: 302: _delay((unsigned long)((10)*(4000000/4000.0)));
   657  0688  300D               	movlw	13
   658  0689  1283               	bcf	3,5	;RP0=0, select bank0
   659  068A  1303               	bcf	3,6	;RP1=0, select bank0
   660  068B  00DC               	movwf	??_main+1
   661  068C  30FB               	movlw	251
   662  068D  00DB               	movwf	??_main
   663  068E                     u767:
   664  068E  0BDB               	decfsz	??_main,f
   665  068F  2E8E               	goto	u767
   666  0690  0BDC               	decfsz	??_main+1,f
   667  0691  2E8E               	goto	u767
   668                           
   669                           ;nb.c: 303: UART_send_char(tensionH);
   670  0692  1283               	bcf	3,5	;RP0=0, select bank0
   671  0693  1303               	bcf	3,6	;RP1=0, select bank0
   672  0694  0842               	movf	_tensionH,w
   673  0695  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   674                           
   675                           ;nb.c: 306: _delay((unsigned long)((10)*(4000000/4000.0)));
   676  069A  300D               	movlw	13
   677  069B  1283               	bcf	3,5	;RP0=0, select bank0
   678  069C  1303               	bcf	3,6	;RP1=0, select bank0
   679  069D  00DC               	movwf	??_main+1
   680  069E  30FB               	movlw	251
   681  069F  00DB               	movwf	??_main
   682  06A0                     u777:
   683  06A0  0BDB               	decfsz	??_main,f
   684  06A1  2EA0               	goto	u777
   685  06A2  0BDC               	decfsz	??_main+1,f
   686  06A3  2EA0               	goto	u777
   687                           
   688                           ;nb.c: 307: s=1;
   689  06A4  1283               	bcf	3,5	;RP0=0, select bank0
   690  06A5  1303               	bcf	3,6	;RP1=0, select bank0
   691  06A6  01BD               	clrf	_s
   692  06A7  0ABD               	incf	_s,f
   693                           
   694                           ;nb.c: 309: ADC1();
   695  06A8  120A  118A  24C6  120A  118A  	fcall	_ADC1
   696                           
   697                           ;nb.c: 310: _delay((unsigned long)((10)*(4000000/4000.0)));
   698  06AD  300D               	movlw	13
   699  06AE  1283               	bcf	3,5	;RP0=0, select bank0
   700  06AF  1303               	bcf	3,6	;RP1=0, select bank0
   701  06B0  00DC               	movwf	??_main+1
   702  06B1  30FB               	movlw	251
   703  06B2  00DB               	movwf	??_main
   704  06B3                     u787:
   705  06B3  0BDB               	decfsz	??_main,f
   706  06B4  2EB3               	goto	u787
   707  06B5  0BDC               	decfsz	??_main+1,f
   708  06B6  2EB3               	goto	u787
   709                           
   710                           ;nb.c: 312: UART_send_char('p');
   711  06B7  3070               	movlw	112
   712  06B8  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   713                           
   714                           ;nb.c: 313: _delay((unsigned long)((10)*(4000000/4000.0)));
   715  06BD  300D               	movlw	13
   716  06BE  1283               	bcf	3,5	;RP0=0, select bank0
   717  06BF  1303               	bcf	3,6	;RP1=0, select bank0
   718  06C0  00DC               	movwf	??_main+1
   719  06C1  30FB               	movlw	251
   720  06C2  00DB               	movwf	??_main
   721  06C3                     u797:
   722  06C3  0BDB               	decfsz	??_main,f
   723  06C4  2EC3               	goto	u797
   724  06C5  0BDC               	decfsz	??_main+1,f
   725  06C6  2EC3               	goto	u797
   726                           
   727                           ;nb.c: 314: UART_send_char('m');
   728  06C7  306D               	movlw	109
   729  06C8  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   730                           
   731                           ;nb.c: 315: _delay((unsigned long)((10)*(4000000/4000.0)));
   732  06CD  300D               	movlw	13
   733  06CE  1283               	bcf	3,5	;RP0=0, select bank0
   734  06CF  1303               	bcf	3,6	;RP1=0, select bank0
   735  06D0  00DC               	movwf	??_main+1
   736  06D1  30FB               	movlw	251
   737  06D2  00DB               	movwf	??_main
   738  06D3                     u807:
   739  06D3  0BDB               	decfsz	??_main,f
   740  06D4  2ED3               	goto	u807
   741  06D5  0BDC               	decfsz	??_main+1,f
   742  06D6  2ED3               	goto	u807
   743                           
   744                           ;nb.c: 316: UART_send_char(tempL);
   745  06D7  1283               	bcf	3,5	;RP0=0, select bank0
   746  06D8  1303               	bcf	3,6	;RP1=0, select bank0
   747  06D9  0840               	movf	_tempL,w
   748  06DA  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   749                           
   750                           ;nb.c: 318: _delay((unsigned long)((10)*(4000000/4000.0)));
   751  06DF  300D               	movlw	13
   752  06E0  1283               	bcf	3,5	;RP0=0, select bank0
   753  06E1  1303               	bcf	3,6	;RP1=0, select bank0
   754  06E2  00DC               	movwf	??_main+1
   755  06E3  30FB               	movlw	251
   756  06E4  00DB               	movwf	??_main
   757  06E5                     u817:
   758  06E5  0BDB               	decfsz	??_main,f
   759  06E6  2EE5               	goto	u817
   760  06E7  0BDC               	decfsz	??_main+1,f
   761  06E8  2EE5               	goto	u817
   762                           
   763                           ;nb.c: 320: UART_send_char('m');
   764  06E9  306D               	movlw	109
   765  06EA  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   766                           
   767                           ;nb.c: 321: _delay((unsigned long)((10)*(4000000/4000.0)));
   768  06EF  300D               	movlw	13
   769  06F0  1283               	bcf	3,5	;RP0=0, select bank0
   770  06F1  1303               	bcf	3,6	;RP1=0, select bank0
   771  06F2  00DC               	movwf	??_main+1
   772  06F3  30FB               	movlw	251
   773  06F4  00DB               	movwf	??_main
   774  06F5                     u827:
   775  06F5  0BDB               	decfsz	??_main,f
   776  06F6  2EF5               	goto	u827
   777  06F7  0BDC               	decfsz	??_main+1,f
   778  06F8  2EF5               	goto	u827
   779                           
   780                           ;nb.c: 322: UART_send_char('p');
   781  06F9  3070               	movlw	112
   782  06FA  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   783                           
   784                           ;nb.c: 323: _delay((unsigned long)((10)*(4000000/4000.0)));
   785  06FF  300D               	movlw	13
   786  0700  1283               	bcf	3,5	;RP0=0, select bank0
   787  0701  1303               	bcf	3,6	;RP1=0, select bank0
   788  0702  00DC               	movwf	??_main+1
   789  0703  30FB               	movlw	251
   790  0704  00DB               	movwf	??_main
   791  0705                     u837:
   792  0705  0BDB               	decfsz	??_main,f
   793  0706  2F05               	goto	u837
   794  0707  0BDC               	decfsz	??_main+1,f
   795  0708  2F05               	goto	u837
   796                           
   797                           ;nb.c: 324: UART_send_char(tempH);
   798  0709  1283               	bcf	3,5	;RP0=0, select bank0
   799  070A  1303               	bcf	3,6	;RP1=0, select bank0
   800  070B  0841               	movf	_tempH,w
   801  070C  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   802                           
   803                           ;nb.c: 326: _delay((unsigned long)((10)*(4000000/4000.0)));
   804  0711  300D               	movlw	13
   805  0712  1283               	bcf	3,5	;RP0=0, select bank0
   806  0713  1303               	bcf	3,6	;RP1=0, select bank0
   807  0714  00DC               	movwf	??_main+1
   808  0715  30FB               	movlw	251
   809  0716  00DB               	movwf	??_main
   810  0717                     u847:
   811  0717  0BDB               	decfsz	??_main,f
   812  0718  2F17               	goto	u847
   813  0719  0BDC               	decfsz	??_main+1,f
   814  071A  2F17               	goto	u847
   815                           
   816                           ;nb.c: 328: s=4;
   817  071B  3004               	movlw	4
   818  071C  1283               	bcf	3,5	;RP0=0, select bank0
   819  071D  1303               	bcf	3,6	;RP1=0, select bank0
   820  071E  00DB               	movwf	??_main
   821  071F  085B               	movf	??_main,w
   822  0720  00BD               	movwf	_s
   823                           
   824                           ;nb.c: 329: ADC2();
   825  0721  120A  118A  22ED  120A  118A  	fcall	_ADC2
   826                           
   827                           ;nb.c: 330: UART_send_char('l');
   828  0726  306C               	movlw	108
   829  0727  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   830                           
   831                           ;nb.c: 331: _delay((unsigned long)((10)*(4000000/4000.0)));
   832  072C  300D               	movlw	13
   833  072D  1283               	bcf	3,5	;RP0=0, select bank0
   834  072E  1303               	bcf	3,6	;RP1=0, select bank0
   835  072F  00DC               	movwf	??_main+1
   836  0730  30FB               	movlw	251
   837  0731  00DB               	movwf	??_main
   838  0732                     u857:
   839  0732  0BDB               	decfsz	??_main,f
   840  0733  2F32               	goto	u857
   841  0734  0BDC               	decfsz	??_main+1,f
   842  0735  2F32               	goto	u857
   843                           
   844                           ;nb.c: 332: UART_send_char('i');
   845  0736  3069               	movlw	105
   846  0737  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   847                           
   848                           ;nb.c: 333: _delay((unsigned long)((10)*(4000000/4000.0)));
   849  073C  300D               	movlw	13
   850  073D  1283               	bcf	3,5	;RP0=0, select bank0
   851  073E  1303               	bcf	3,6	;RP1=0, select bank0
   852  073F  00DC               	movwf	??_main+1
   853  0740  30FB               	movlw	251
   854  0741  00DB               	movwf	??_main
   855  0742                     u867:
   856  0742  0BDB               	decfsz	??_main,f
   857  0743  2F42               	goto	u867
   858  0744  0BDC               	decfsz	??_main+1,f
   859  0745  2F42               	goto	u867
   860                           
   861                           ;nb.c: 334: UART_send_char(check);
   862  0746  1283               	bcf	3,5	;RP0=0, select bank0
   863  0747  1303               	bcf	3,6	;RP1=0, select bank0
   864  0748  083C               	movf	_check,w
   865  0749  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   866                           
   867                           ;nb.c: 335: _delay((unsigned long)((10)*(4000000/4000.0)));
   868  074E  300D               	movlw	13
   869  074F  1283               	bcf	3,5	;RP0=0, select bank0
   870  0750  1303               	bcf	3,6	;RP1=0, select bank0
   871  0751  00DC               	movwf	??_main+1
   872  0752  30FB               	movlw	251
   873  0753  00DB               	movwf	??_main
   874  0754                     u877:
   875  0754  0BDB               	decfsz	??_main,f
   876  0755  2F54               	goto	u877
   877  0756  0BDC               	decfsz	??_main+1,f
   878  0757  2F54               	goto	u877
   879                           
   880                           ;nb.c: 336: UART_send_char('f');
   881  0758  3066               	movlw	102
   882  0759  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   883                           
   884                           ;nb.c: 337: _delay((unsigned long)((10)*(4000000/4000.0)));
   885  075E  300D               	movlw	13
   886  075F  1283               	bcf	3,5	;RP0=0, select bank0
   887  0760  1303               	bcf	3,6	;RP1=0, select bank0
   888  0761  00DC               	movwf	??_main+1
   889  0762  30FB               	movlw	251
   890  0763  00DB               	movwf	??_main
   891  0764                     u887:
   892  0764  0BDB               	decfsz	??_main,f
   893  0765  2F64               	goto	u887
   894  0766  0BDC               	decfsz	??_main+1,f
   895  0767  2F64               	goto	u887
   896                           
   897                           ;nb.c: 338: UART_send_char('h');
   898  0768  3068               	movlw	104
   899  0769  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   900                           
   901                           ;nb.c: 340: _delay((unsigned long)((10)*(4000000/4000.0)));
   902  076E  300D               	movlw	13
   903  076F  1283               	bcf	3,5	;RP0=0, select bank0
   904  0770  1303               	bcf	3,6	;RP1=0, select bank0
   905  0771  00DC               	movwf	??_main+1
   906  0772  30FB               	movlw	251
   907  0773  00DB               	movwf	??_main
   908  0774                     u897:
   909  0774  0BDB               	decfsz	??_main,f
   910  0775  2F74               	goto	u897
   911  0776  0BDC               	decfsz	??_main+1,f
   912  0777  2F74               	goto	u897
   913                           
   914                           ;nb.c: 341: UART_send_char(currentL);
   915  0778  1283               	bcf	3,5	;RP0=0, select bank0
   916  0779  1303               	bcf	3,6	;RP1=0, select bank0
   917  077A  083E               	movf	_currentL,w
   918  077B  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   919                           
   920                           ;nb.c: 343: _delay((unsigned long)((10)*(4000000/4000.0)));
   921  0780  300D               	movlw	13
   922  0781  1283               	bcf	3,5	;RP0=0, select bank0
   923  0782  1303               	bcf	3,6	;RP1=0, select bank0
   924  0783  00DC               	movwf	??_main+1
   925  0784  30FB               	movlw	251
   926  0785  00DB               	movwf	??_main
   927  0786                     u907:
   928  0786  0BDB               	decfsz	??_main,f
   929  0787  2F86               	goto	u907
   930  0788  0BDC               	decfsz	??_main+1,f
   931  0789  2F86               	goto	u907
   932                           
   933                           ;nb.c: 344: _delay((unsigned long)((10)*(4000000/4000.0)));
   934  078A  300D               	movlw	13
   935  078B  1283               	bcf	3,5	;RP0=0, select bank0
   936  078C  1303               	bcf	3,6	;RP1=0, select bank0
   937  078D  00DC               	movwf	??_main+1
   938  078E  30FB               	movlw	251
   939  078F  00DB               	movwf	??_main
   940  0790                     u917:
   941  0790  0BDB               	decfsz	??_main,f
   942  0791  2F90               	goto	u917
   943  0792  0BDC               	decfsz	??_main+1,f
   944  0793  2F90               	goto	u917
   945                           
   946                           ;nb.c: 345: UART_send_char('h');
   947  0794  3068               	movlw	104
   948  0795  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   949                           
   950                           ;nb.c: 346: _delay((unsigned long)((10)*(4000000/4000.0)));
   951  079A  300D               	movlw	13
   952  079B  1283               	bcf	3,5	;RP0=0, select bank0
   953  079C  1303               	bcf	3,6	;RP1=0, select bank0
   954  079D  00DC               	movwf	??_main+1
   955  079E  30FB               	movlw	251
   956  079F  00DB               	movwf	??_main
   957  07A0                     u927:
   958  07A0  0BDB               	decfsz	??_main,f
   959  07A1  2FA0               	goto	u927
   960  07A2  0BDC               	decfsz	??_main+1,f
   961  07A3  2FA0               	goto	u927
   962                           
   963                           ;nb.c: 347: UART_send_char('f');
   964  07A4  3066               	movlw	102
   965  07A5  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   966                           
   967                           ;nb.c: 349: _delay((unsigned long)((10)*(4000000/4000.0)));
   968  07AA  300D               	movlw	13
   969  07AB  1283               	bcf	3,5	;RP0=0, select bank0
   970  07AC  1303               	bcf	3,6	;RP1=0, select bank0
   971  07AD  00DC               	movwf	??_main+1
   972  07AE  30FB               	movlw	251
   973  07AF  00DB               	movwf	??_main
   974  07B0                     u937:
   975  07B0  0BDB               	decfsz	??_main,f
   976  07B1  2FB0               	goto	u937
   977  07B2  0BDC               	decfsz	??_main+1,f
   978  07B3  2FB0               	goto	u937
   979                           
   980                           ;nb.c: 350: UART_send_char(currentH);
   981  07B4  1283               	bcf	3,5	;RP0=0, select bank0
   982  07B5  1303               	bcf	3,6	;RP1=0, select bank0
   983  07B6  083F               	movf	_currentH,w
   984  07B7  120A  118A  21A4  120A  118A  	fcall	_UART_send_char
   985                           
   986                           ;nb.c: 352: _delay((unsigned long)((10)*(4000000/4000.0)));
   987  07BC  300D               	movlw	13
   988  07BD  1283               	bcf	3,5	;RP0=0, select bank0
   989  07BE  1303               	bcf	3,6	;RP1=0, select bank0
   990  07BF  00DC               	movwf	??_main+1
   991  07C0  30FB               	movlw	251
   992  07C1  00DB               	movwf	??_main
   993  07C2                     u947:
   994  07C2  0BDB               	decfsz	??_main,f
   995  07C3  2FC2               	goto	u947
   996  07C4  0BDC               	decfsz	??_main+1,f
   997  07C5  2FC2               	goto	u947
   998  07C6  3001               	movlw	1
   999  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  1000  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  1001  07C9  07B8               	addwf	_rpt,f
  1002  07CA  1803               	skipnc
  1003  07CB  0AB9               	incf	_rpt+1,f
  1004  07CC  3000               	movlw	0
  1005  07CD  07B9               	addwf	_rpt+1,f
  1006  07CE  0839               	movf	_rpt+1,w
  1007  07CF  3A80               	xorlw	128
  1008  07D0  00FF               	movwf	127
  1009  07D1  3080               	movlw	128
  1010  07D2  027F               	subwf	127,w
  1011  07D3  1D03               	skipz
  1012  07D4  2FD7               	goto	u665
  1013  07D5  3005               	movlw	5
  1014  07D6  0238               	subwf	_rpt,w
  1015  07D7                     u665:
  1016  07D7  1C03               	skipc
  1017  07D8  2E23               	goto	l1411
  1018                           
  1019                           ;nb.c: 353: };nb.c: 355: if(temp>0x333)
  1020  07D9  3003               	movlw	3
  1021  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  1022  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  1023  07DC  0233               	subwf	_temp+1,w
  1024  07DD  3034               	movlw	52
  1025  07DE  1903               	skipnz
  1026  07DF  0232               	subwf	_temp,w
  1027  07E0  1C03               	skipc
  1028  07E1  2FE4               	goto	l1523
  1029                           
  1030                           ;nb.c: 356: {;nb.c: 357: RB0=1;
  1031  07E2  1406               	bsf	6,0	;volatile
  1032                           
  1033                           ;nb.c: 359: }
  1034  07E3  2E21               	goto	l1405
  1035  07E4                     l1523:
  1036                           
  1037                           ;nb.c: 360: else;nb.c: 361: {;nb.c: 363: if(tension<649)
  1038  07E4  3002               	movlw	2
  1039  07E5  022D               	subwf	_tension+1,w
  1040  07E6  3089               	movlw	137
  1041  07E7  1903               	skipnz
  1042  07E8  022C               	subwf	_tension,w
  1043  07E9  1803               	skipnc
  1044  07EA  2E21               	goto	l1405
  1045                           
  1046                           ;nb.c: 364: RB0=0;
  1047  07EB  1006               	bcf	6,0	;volatile
  1048  07EC  2E21               	goto	l1405
  1049  07ED                     __end_of_main:
  1050                           
  1051                           	psect	text1
  1052  01A4                     __ptext1:	
  1053 ;; *************** function _UART_send_char *****************
  1054 ;; Defined at:
  1055 ;;		line 258 in file "nb.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  bt              1    wreg     unsigned char 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  bt              1    0[COMMON] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 300/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1069 ;;      Params:         0       0       0       0       0
  1070 ;;      Locals:         1       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0
  1072 ;;      Totals:         1       0       0       0       0
  1073 ;;Total ram usage:        1 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           
  1083                           ;psect for function _UART_send_char
  1084  01A4                     _UART_send_char:
  1085                           
  1086                           ;incstack = 0
  1087                           ; Regs used in _UART_send_char: [wreg]
  1088                           ;UART_send_char@bt stored from wreg
  1089  01A4  00F0               	movwf	UART_send_char@bt
  1090                           
  1091                           ;nb.c: 261: TXREG = bt;
  1092  01A5  0870               	movf	UART_send_char@bt,w
  1093  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1094  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1095  01A8  0099               	movwf	25	;volatile
  1096  01A9  0008               	return
  1097  01AA                     __end_of_UART_send_char:
  1098                           
  1099                           	psect	text2
  1100  01B2                     __ptext2:	
  1101 ;; *************** function _Initialize_UART *****************
  1102 ;; Defined at:
  1103 ;;		line 230 in file "nb.c"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;		None
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;		None
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg
  1112 ;; Tracked objects:
  1113 ;;		On entry : B00/100
  1114 ;;		On exit  : B00/0
  1115 ;;		Unchanged: 800/0
  1116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1117 ;;      Params:         0       0       0       0       0
  1118 ;;      Locals:         0       0       0       0       0
  1119 ;;      Temps:          0       0       0       0       0
  1120 ;;      Totals:         0       0       0       0       0
  1121 ;;Total ram usage:        0 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_main
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           
  1131                           ;psect for function _Initialize_UART
  1132  01B2                     _Initialize_UART:
  1133                           
  1134                           ;nb.c: 233: TRISC6 = 0;
  1135                           
  1136                           ;incstack = 0
  1137                           ; Regs used in _Initialize_UART: [wreg]
  1138  01B2  1307               	bcf	7,6	;volatile
  1139                           
  1140                           ;nb.c: 234: TRISC7 = 1;
  1141  01B3  1787               	bsf	7,7	;volatile
  1142                           
  1143                           ;nb.c: 240: SPBRG = ((4000000/16)/9600) - 1;
  1144  01B4  3019               	movlw	25
  1145  01B5  0099               	movwf	25	;volatile
  1146                           
  1147                           ;nb.c: 241: BRGH = 1;
  1148  01B6  1518               	bsf	24,2	;volatile
  1149                           
  1150                           ;nb.c: 243: SYNC = 0;
  1151  01B7  1218               	bcf	24,4	;volatile
  1152                           
  1153                           ;nb.c: 244: SPEN = 1;
  1154  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1155  01B9  1798               	bsf	24,7	;volatile
  1156                           
  1157                           ;nb.c: 247: TXEN = 1;
  1158  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  1159  01BB  1698               	bsf	24,5	;volatile
  1160                           
  1161                           ;nb.c: 248: CREN = 1;
  1162  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1163  01BD  1618               	bsf	24,4	;volatile
  1164                           
  1165                           ;nb.c: 252: TX9 = 0;
  1166  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  1167  01BF  1318               	bcf	24,6	;volatile
  1168                           
  1169                           ;nb.c: 253: RX9 = 0;
  1170  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1171  01C1  1318               	bcf	24,6	;volatile
  1172  01C2  0008               	return
  1173  01C3                     __end_of_Initialize_UART:
  1174                           
  1175                           	psect	text3
  1176  019E                     __ptext3:	
  1177 ;; *************** function _ADC_Init *****************
  1178 ;; Defined at:
  1179 ;;		line 30 in file "nb.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;		None
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;		None
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg
  1188 ;; Tracked objects:
  1189 ;;		On entry : B00/0
  1190 ;;		On exit  : B00/100
  1191 ;;		Unchanged: 800/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1193 ;;      Params:         0       0       0       0       0
  1194 ;;      Locals:         0       0       0       0       0
  1195 ;;      Temps:          0       0       0       0       0
  1196 ;;      Totals:         0       0       0       0       0
  1197 ;;Total ram usage:        0 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; This function calls:
  1200 ;;		Nothing
  1201 ;; This function is called by:
  1202 ;;		_main
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           
  1207                           ;psect for function _ADC_Init
  1208  019E                     _ADC_Init:
  1209                           
  1210                           ;nb.c: 32: ADCON0 = 0x81;
  1211                           
  1212                           ;incstack = 0
  1213                           ; Regs used in _ADC_Init: [wreg]
  1214  019E  3081               	movlw	129
  1215  019F  009F               	movwf	31	;volatile
  1216                           
  1217                           ;nb.c: 33: ADCON1 = 0xC0;
  1218  01A0  30C0               	movlw	192
  1219  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  1220  01A2  009F               	movwf	31	;volatile
  1221  01A3  0008               	return
  1222  01A4                     __end_of_ADC_Init:
  1223                           
  1224                           	psect	text4
  1225  0561                     __ptext4:	
  1226 ;; *************** function _ADC3 *****************
  1227 ;; Defined at:
  1228 ;;		line 208 in file "nb.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;		None
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  i               2    8[BANK0 ] int 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      void 
  1235 ;; Registers used:
  1236 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 300/0
  1239 ;;		On exit  : 300/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1242 ;;      Params:         0       0       0       0       0
  1243 ;;      Locals:         0       2       0       0       0
  1244 ;;      Temps:          0       8       0       0       0
  1245 ;;      Totals:         0      10       0       0       0
  1246 ;;Total ram usage:       10 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    1
  1249 ;; This function calls:
  1250 ;;		_ADC_Read
  1251 ;;		___lldiv
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           
  1258                           ;psect for function _ADC3
  1259  0561                     _ADC3:
  1260                           
  1261                           ;nb.c: 209: somme=0;
  1262                           
  1263                           ;incstack = 0
  1264                           ; Regs used in _ADC3: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1265  0561  3000               	movlw	0
  1266  0562  00AB               	movwf	_somme+3
  1267  0563  3000               	movlw	0
  1268  0564  00AA               	movwf	_somme+2
  1269  0565  3000               	movlw	0
  1270  0566  00A9               	movwf	_somme+1
  1271  0567  3000               	movlw	0
  1272  0568  00A8               	movwf	_somme
  1273                           
  1274                           ;nb.c: 210: c=0;
  1275  0569  01B6               	clrf	_c
  1276  056A  01B7               	clrf	_c+1
  1277                           
  1278                           ;nb.c: 213: _delay((unsigned long)((8)*(4000000/4000.0)));
  1279  056B  300B               	movlw	11
  1280  056C  1283               	bcf	3,5	;RP0=0, select bank0
  1281  056D  1303               	bcf	3,6	;RP1=0, select bank0
  1282  056E  00C5               	movwf	??_ADC3+1
  1283  056F  3061               	movlw	97
  1284  0570  00C4               	movwf	??_ADC3
  1285  0571                     u957:
  1286  0571  0BC4               	decfsz	??_ADC3,f
  1287  0572  2D71               	goto	u957
  1288  0573  0BC5               	decfsz	??_ADC3+1,f
  1289  0574  2D71               	goto	u957
  1290  0575  2D76               	nop2
  1291                           
  1292                           ;nb.c: 214: for(int i=0; i<40;i++)
  1293  0576  1283               	bcf	3,5	;RP0=0, select bank0
  1294  0577  1303               	bcf	3,6	;RP1=0, select bank0
  1295  0578  01CC               	clrf	ADC3@i
  1296  0579  01CD               	clrf	ADC3@i+1
  1297  057A                     l1351:
  1298                           
  1299                           ;nb.c: 215: {;nb.c: 216: c=ADC_Read(s);
  1300  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1301  057B  1303               	bcf	3,6	;RP1=0, select bank0
  1302  057C  083D               	movf	_s,w
  1303  057D  00C4               	movwf	??_ADC3
  1304  057E  01C5               	clrf	??_ADC3+1
  1305  057F  0844               	movf	??_ADC3,w
  1306  0580  00F0               	movwf	ADC_Read@channel
  1307  0581  0845               	movf	??_ADC3+1,w
  1308  0582  00F1               	movwf	ADC_Read@channel+1
  1309  0583  120A  118A  21C3  120A  118A  	fcall	_ADC_Read
  1310  0588  0871               	movf	?_ADC_Read+1,w
  1311  0589  1283               	bcf	3,5	;RP0=0, select bank0
  1312  058A  00B7               	movwf	_c+1
  1313  058B  0870               	movf	?_ADC_Read,w
  1314  058C  00B6               	movwf	_c
  1315                           
  1316                           ;nb.c: 217: _delay((unsigned long)((8)*(4000000/4000.0)));
  1317  058D  300B               	movlw	11
  1318  058E  1283               	bcf	3,5	;RP0=0, select bank0
  1319  058F  1303               	bcf	3,6	;RP1=0, select bank0
  1320  0590  00C5               	movwf	??_ADC3+1
  1321  0591  3061               	movlw	97
  1322  0592  00C4               	movwf	??_ADC3
  1323  0593                     u967:
  1324  0593  0BC4               	decfsz	??_ADC3,f
  1325  0594  2D93               	goto	u967
  1326  0595  0BC5               	decfsz	??_ADC3+1,f
  1327  0596  2D93               	goto	u967
  1328  0597  2D98               	nop2
  1329                           
  1330                           ;nb.c: 218: somme=somme+c;
  1331  0598  1283               	bcf	3,5	;RP0=0, select bank0
  1332  0599  1303               	bcf	3,6	;RP1=0, select bank0
  1333  059A  0828               	movf	_somme,w
  1334  059B  00C4               	movwf	??_ADC3
  1335  059C  0829               	movf	_somme+1,w
  1336  059D  00C5               	movwf	??_ADC3+1
  1337  059E  082A               	movf	_somme+2,w
  1338  059F  00C6               	movwf	??_ADC3+2
  1339  05A0  082B               	movf	_somme+3,w
  1340  05A1  00C7               	movwf	??_ADC3+3
  1341  05A2  0836               	movf	_c,w
  1342  05A3  00C8               	movwf	??_ADC3+4
  1343  05A4  0837               	movf	_c+1,w
  1344  05A5  00C9               	movwf	??_ADC3+5
  1345  05A6  01CA               	clrf	??_ADC3+6
  1346  05A7  01CB               	clrf	??_ADC3+7
  1347  05A8  0848               	movf	??_ADC3+4,w
  1348  05A9  07C4               	addwf	??_ADC3,f
  1349  05AA  0849               	movf	??_ADC3+5,w
  1350  05AB  1803               	skipnc
  1351  05AC  0F49               	incfsz	??_ADC3+5,w
  1352  05AD  2DAF               	goto	u640
  1353  05AE  2DB0               	goto	u641
  1354  05AF                     u640:
  1355  05AF  07C5               	addwf	??_ADC3+1,f
  1356  05B0                     u641:
  1357  05B0  084A               	movf	??_ADC3+6,w
  1358  05B1  1803               	skipnc
  1359  05B2  0F4A               	incfsz	??_ADC3+6,w
  1360  05B3  2DB5               	goto	u642
  1361  05B4  2DB6               	goto	u643
  1362  05B5                     u642:
  1363  05B5  07C6               	addwf	??_ADC3+2,f
  1364  05B6                     u643:
  1365  05B6  084B               	movf	??_ADC3+7,w
  1366  05B7  1803               	skipnc
  1367  05B8  0A4B               	incf	??_ADC3+7,w
  1368  05B9  07C7               	addwf	??_ADC3+3,f
  1369  05BA  0847               	movf	??_ADC3+3,w
  1370  05BB  00AB               	movwf	_somme+3
  1371  05BC  0846               	movf	??_ADC3+2,w
  1372  05BD  00AA               	movwf	_somme+2
  1373  05BE  0845               	movf	??_ADC3+1,w
  1374  05BF  00A9               	movwf	_somme+1
  1375  05C0  0844               	movf	??_ADC3,w
  1376  05C1  00A8               	movwf	_somme
  1377  05C2  3001               	movlw	1
  1378  05C3  07CC               	addwf	ADC3@i,f
  1379  05C4  1803               	skipnc
  1380  05C5  0ACD               	incf	ADC3@i+1,f
  1381  05C6  3000               	movlw	0
  1382  05C7  07CD               	addwf	ADC3@i+1,f
  1383  05C8  084D               	movf	ADC3@i+1,w
  1384  05C9  3A80               	xorlw	128
  1385  05CA  00FF               	movwf	127
  1386  05CB  3080               	movlw	128
  1387  05CC  027F               	subwf	127,w
  1388  05CD  1D03               	skipz
  1389  05CE  2DD1               	goto	u655
  1390  05CF  3028               	movlw	40
  1391  05D0  024C               	subwf	ADC3@i,w
  1392  05D1                     u655:
  1393  05D1  1C03               	skipc
  1394  05D2  2D7A               	goto	l1351
  1395                           
  1396                           ;nb.c: 220: };nb.c: 221: tension=somme/40;
  1397  05D3  3000               	movlw	0
  1398  05D4  00F3               	movwf	___lldiv@divisor+3
  1399  05D5  3000               	movlw	0
  1400  05D6  00F2               	movwf	___lldiv@divisor+2
  1401  05D7  3000               	movlw	0
  1402  05D8  00F1               	movwf	___lldiv@divisor+1
  1403  05D9  3028               	movlw	40
  1404  05DA  00F0               	movwf	___lldiv@divisor
  1405  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  1406  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  1407  05DD  082B               	movf	_somme+3,w
  1408  05DE  00F7               	movwf	___lldiv@dividend+3
  1409  05DF  082A               	movf	_somme+2,w
  1410  05E0  00F6               	movwf	___lldiv@dividend+2
  1411  05E1  0829               	movf	_somme+1,w
  1412  05E2  00F5               	movwf	___lldiv@dividend+1
  1413  05E3  0828               	movf	_somme,w
  1414  05E4  00F4               	movwf	___lldiv@dividend
  1415  05E5  120A  118A  228F   	fcall	___lldiv
  1416  05E8  0871               	movf	?___lldiv+1,w
  1417  05E9  00AD               	movwf	_tension+1
  1418  05EA  0870               	movf	?___lldiv,w
  1419  05EB  00AC               	movwf	_tension
  1420                           
  1421                           ;nb.c: 222: tensionL=tension;
  1422  05EC  082C               	movf	_tension,w
  1423  05ED  00C4               	movwf	??_ADC3
  1424  05EE  0844               	movf	??_ADC3,w
  1425  05EF  00C3               	movwf	_tensionL
  1426                           
  1427                           ;nb.c: 224: tensionH=tension>>8;
  1428  05F0  082D               	movf	_tension+1,w
  1429  05F1  00C4               	movwf	??_ADC3
  1430  05F2  0844               	movf	??_ADC3,w
  1431  05F3  00C2               	movwf	_tensionH
  1432                           
  1433                           ;nb.c: 226: somme=0;
  1434  05F4  3000               	movlw	0
  1435  05F5  00AB               	movwf	_somme+3
  1436  05F6  3000               	movlw	0
  1437  05F7  00AA               	movwf	_somme+2
  1438  05F8  3000               	movlw	0
  1439  05F9  00A9               	movwf	_somme+1
  1440  05FA  3000               	movlw	0
  1441  05FB  00A8               	movwf	_somme
  1442  05FC  0008               	return
  1443  05FD                     __end_of_ADC3:
  1444                           
  1445                           	psect	text5
  1446  02ED                     __ptext5:	
  1447 ;; *************** function _ADC2 *****************
  1448 ;; Defined at:
  1449 ;;		line 161 in file "nb.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 300/0
  1460 ;;		On exit  : 300/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1463 ;;      Params:         0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0
  1465 ;;      Temps:          0       1       0       0       0
  1466 ;;      Totals:         0       1       0       0       0
  1467 ;;Total ram usage:        1 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    2
  1470 ;; This function calls:
  1471 ;;		_Shi
  1472 ;;		_aver
  1473 ;;		_num
  1474 ;; This function is called by:
  1475 ;;		_main
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           
  1480                           ;psect for function _ADC2
  1481  02ED                     _ADC2:
  1482                           
  1483                           ;nb.c: 163: somme=0;
  1484                           
  1485                           ;incstack = 0
  1486                           ; Regs used in _ADC2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1487  02ED  3000               	movlw	0
  1488  02EE  00AB               	movwf	_somme+3
  1489  02EF  3000               	movlw	0
  1490  02F0  00AA               	movwf	_somme+2
  1491  02F1  3000               	movlw	0
  1492  02F2  00A9               	movwf	_somme+1
  1493  02F3  3000               	movlw	0
  1494  02F4  00A8               	movwf	_somme
  1495                           
  1496                           ;nb.c: 164: c=0;
  1497  02F5  01B6               	clrf	_c
  1498  02F6  01B7               	clrf	_c+1
  1499                           
  1500                           ;nb.c: 165: num();
  1501  02F7  120A  118A  2447  120A  118A  	fcall	_num
  1502                           
  1503                           ;nb.c: 166: if((val < 0x2b8) && (val > 0xcd))
  1504  02FC  3002               	movlw	2
  1505  02FD  023B               	subwf	_val+1,w	;volatile
  1506  02FE  30B8               	movlw	184
  1507  02FF  1903               	skipnz
  1508  0300  023A               	subwf	_val,w	;volatile
  1509  0301  1803               	skipnc
  1510  0302  2B0C               	goto	l1309
  1511  0303  3000               	movlw	0
  1512  0304  023B               	subwf	_val+1,w	;volatile
  1513  0305  30CE               	movlw	206
  1514  0306  1903               	skipnz
  1515  0307  023A               	subwf	_val,w	;volatile
  1516  0308  1C03               	skipc
  1517  0309  2B0C               	goto	l1309
  1518                           
  1519                           ;nb.c: 167: {;nb.c: 168: check=0;
  1520  030A  01BC               	clrf	_check
  1521                           
  1522                           ;nb.c: 169: }
  1523  030B  2B4C               	goto	l1335
  1524  030C                     l1309:
  1525                           
  1526                           ;nb.c: 170: else;nb.c: 171: {;nb.c: 175: s=5;
  1527  030C  3005               	movlw	5
  1528  030D  00D1               	movwf	??_ADC2
  1529  030E  0851               	movf	??_ADC2,w
  1530  030F  00BD               	movwf	_s
  1531                           
  1532                           ;nb.c: 176: num();
  1533  0310  120A  118A  2447  120A  118A  	fcall	_num
  1534                           
  1535                           ;nb.c: 177: if((val < 0x2b8) && (val > 0xcd))
  1536  0315  3002               	movlw	2
  1537  0316  023B               	subwf	_val+1,w	;volatile
  1538  0317  30B8               	movlw	184
  1539  0318  1903               	skipnz
  1540  0319  023A               	subwf	_val,w	;volatile
  1541  031A  1803               	skipnc
  1542  031B  2B26               	goto	l1319
  1543  031C  3000               	movlw	0
  1544  031D  023B               	subwf	_val+1,w	;volatile
  1545  031E  30CE               	movlw	206
  1546  031F  1903               	skipnz
  1547  0320  023A               	subwf	_val,w	;volatile
  1548  0321  1C03               	skipc
  1549  0322  2B26               	goto	l1319
  1550                           
  1551                           ;nb.c: 178: {;nb.c: 179: check=1;
  1552  0323  01BC               	clrf	_check
  1553  0324  0ABC               	incf	_check,f
  1554                           
  1555                           ;nb.c: 180: }
  1556  0325  2B4C               	goto	l1335
  1557  0326                     l1319:
  1558                           
  1559                           ;nb.c: 181: else;nb.c: 182: {;nb.c: 183: s=6;
  1560  0326  3006               	movlw	6
  1561  0327  00D1               	movwf	??_ADC2
  1562  0328  0851               	movf	??_ADC2,w
  1563  0329  00BD               	movwf	_s
  1564                           
  1565                           ;nb.c: 185: num();
  1566  032A  120A  118A  2447  120A  118A  	fcall	_num
  1567                           
  1568                           ;nb.c: 186: if((val < 0x2b8) && (val > 0xcd))
  1569  032F  3002               	movlw	2
  1570  0330  023B               	subwf	_val+1,w	;volatile
  1571  0331  30B8               	movlw	184
  1572  0332  1903               	skipnz
  1573  0333  023A               	subwf	_val,w	;volatile
  1574  0334  1803               	skipnc
  1575  0335  2B3F               	goto	l1329
  1576  0336  3000               	movlw	0
  1577  0337  023B               	subwf	_val+1,w	;volatile
  1578  0338  30CE               	movlw	206
  1579  0339  1903               	skipnz
  1580  033A  023A               	subwf	_val,w	;volatile
  1581  033B  1C03               	skipc
  1582  033C  2B3F               	goto	l1329
  1583                           
  1584                           ;nb.c: 187: {;nb.c: 188: check=2;
  1585  033D  3002               	movlw	2
  1586  033E  2B49               	goto	L1
  1587  033F                     l1329:	
  1588                           ;nb.c: 189: }
  1589                           
  1590                           
  1591                           ;nb.c: 190: else;nb.c: 191: {;nb.c: 192: s=7;
  1592  033F  3007               	movlw	7
  1593  0340  00D1               	movwf	??_ADC2
  1594  0341  0851               	movf	??_ADC2,w
  1595  0342  00BD               	movwf	_s
  1596                           
  1597                           ;nb.c: 193: num();
  1598  0343  120A  118A  2447  120A  118A  	fcall	_num
  1599                           
  1600                           ;nb.c: 194: check=3;
  1601  0348  3003               	movlw	3
  1602  0349                     L1:
  1603  0349  00D1               	movwf	??_ADC2
  1604  034A  0851               	movf	??_ADC2,w
  1605  034B  00BC               	movwf	_check
  1606  034C                     l1335:
  1607                           
  1608                           ;nb.c: 195: };nb.c: 196: };nb.c: 197: };nb.c: 200: Shi();
  1609  034C  120A  118A  225B  120A  118A  	fcall	_Shi
  1610                           
  1611                           ;nb.c: 202: aver();
  1612  0351  120A  118A  23D2   	fcall	_aver
  1613                           
  1614                           ;nb.c: 203: somme=0;
  1615  0354  3000               	movlw	0
  1616  0355  00AB               	movwf	_somme+3
  1617  0356  3000               	movlw	0
  1618  0357  00AA               	movwf	_somme+2
  1619  0358  3000               	movlw	0
  1620  0359  00A9               	movwf	_somme+1
  1621  035A  3000               	movlw	0
  1622  035B  00A8               	movwf	_somme
  1623  035C  0008               	return
  1624  035D                     __end_of_ADC2:
  1625                           
  1626                           	psect	text6
  1627  0447                     __ptext6:	
  1628 ;; *************** function _num *****************
  1629 ;; Defined at:
  1630 ;;		line 140 in file "nb.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;		None
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  i               2    8[BANK0 ] int 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 300/0
  1641 ;;		On exit  : 300/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1644 ;;      Params:         0       0       0       0       0
  1645 ;;      Locals:         0       2       0       0       0
  1646 ;;      Temps:          0       8       0       0       0
  1647 ;;      Totals:         0      10       0       0       0
  1648 ;;Total ram usage:       10 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    1
  1651 ;; This function calls:
  1652 ;;		_ADC_Read1
  1653 ;;		___lldiv
  1654 ;; This function is called by:
  1655 ;;		_ADC2
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           
  1660                           ;psect for function _num
  1661  0447                     _num:
  1662                           
  1663                           ;nb.c: 142: _delay((unsigned long)((1)*(4000000/4000.0)));
  1664                           
  1665                           ;incstack = 0
  1666                           ; Regs used in _num: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1667  0447  30C7               	movlw	199
  1668  0448  1283               	bcf	3,5	;RP0=0, select bank0
  1669  0449  1303               	bcf	3,6	;RP1=0, select bank0
  1670  044A  00C4               	movwf	??_num
  1671  044B                     u977:
  1672  044B  2C4C               	nop2
  1673  044C  0BC4               	decfsz	??_num,f
  1674  044D  2C4B               	goto	u977
  1675  044E  2C4F               	nop2
  1676                           
  1677                           ;nb.c: 143: for(int i=0; i<20;i++)
  1678  044F  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0450  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0451  01CC               	clrf	num@i
  1681  0452  01CD               	clrf	num@i+1
  1682  0453                     l1255:
  1683                           
  1684                           ;nb.c: 144: {;nb.c: 147: c=ADC_Read1(s);
  1685  0453  1283               	bcf	3,5	;RP0=0, select bank0
  1686  0454  1303               	bcf	3,6	;RP1=0, select bank0
  1687  0455  083D               	movf	_s,w
  1688  0456  00C4               	movwf	??_num
  1689  0457  01C5               	clrf	??_num+1
  1690  0458  0844               	movf	??_num,w
  1691  0459  00F0               	movwf	ADC_Read1@channel
  1692  045A  0845               	movf	??_num+1,w
  1693  045B  00F1               	movwf	ADC_Read1@channel+1
  1694  045C  120A  118A  21F5  120A  118A  	fcall	_ADC_Read1
  1695  0461  0871               	movf	?_ADC_Read1+1,w
  1696  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1697  0463  00B7               	movwf	_c+1
  1698  0464  0870               	movf	?_ADC_Read1,w
  1699  0465  00B6               	movwf	_c
  1700                           
  1701                           ;nb.c: 148: _delay((unsigned long)((5)*(4000000/4000.0)));
  1702  0466  3007               	movlw	7
  1703  0467  1283               	bcf	3,5	;RP0=0, select bank0
  1704  0468  1303               	bcf	3,6	;RP1=0, select bank0
  1705  0469  00C5               	movwf	??_num+1
  1706  046A  307C               	movlw	124
  1707  046B  00C4               	movwf	??_num
  1708  046C                     u987:
  1709  046C  0BC4               	decfsz	??_num,f
  1710  046D  2C6C               	goto	u987
  1711  046E  0BC5               	decfsz	??_num+1,f
  1712  046F  2C6C               	goto	u987
  1713  0470  0000               	nop
  1714                           
  1715                           ;nb.c: 149: somme=somme+c;
  1716  0471  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0472  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0473  0828               	movf	_somme,w
  1719  0474  00C4               	movwf	??_num
  1720  0475  0829               	movf	_somme+1,w
  1721  0476  00C5               	movwf	??_num+1
  1722  0477  082A               	movf	_somme+2,w
  1723  0478  00C6               	movwf	??_num+2
  1724  0479  082B               	movf	_somme+3,w
  1725  047A  00C7               	movwf	??_num+3
  1726  047B  0836               	movf	_c,w
  1727  047C  00C8               	movwf	??_num+4
  1728  047D  0837               	movf	_c+1,w
  1729  047E  00C9               	movwf	??_num+5
  1730  047F  01CA               	clrf	??_num+6
  1731  0480  01CB               	clrf	??_num+7
  1732  0481  0848               	movf	??_num+4,w
  1733  0482  07C4               	addwf	??_num,f
  1734  0483  0849               	movf	??_num+5,w
  1735  0484  1803               	skipnc
  1736  0485  0F49               	incfsz	??_num+5,w
  1737  0486  2C88               	goto	u540
  1738  0487  2C89               	goto	u541
  1739  0488                     u540:
  1740  0488  07C5               	addwf	??_num+1,f
  1741  0489                     u541:
  1742  0489  084A               	movf	??_num+6,w
  1743  048A  1803               	skipnc
  1744  048B  0F4A               	incfsz	??_num+6,w
  1745  048C  2C8E               	goto	u542
  1746  048D  2C8F               	goto	u543
  1747  048E                     u542:
  1748  048E  07C6               	addwf	??_num+2,f
  1749  048F                     u543:
  1750  048F  084B               	movf	??_num+7,w
  1751  0490  1803               	skipnc
  1752  0491  0A4B               	incf	??_num+7,w
  1753  0492  07C7               	addwf	??_num+3,f
  1754  0493  0847               	movf	??_num+3,w
  1755  0494  00AB               	movwf	_somme+3
  1756  0495  0846               	movf	??_num+2,w
  1757  0496  00AA               	movwf	_somme+2
  1758  0497  0845               	movf	??_num+1,w
  1759  0498  00A9               	movwf	_somme+1
  1760  0499  0844               	movf	??_num,w
  1761  049A  00A8               	movwf	_somme
  1762  049B  3001               	movlw	1
  1763  049C  07CC               	addwf	num@i,f
  1764  049D  1803               	skipnc
  1765  049E  0ACD               	incf	num@i+1,f
  1766  049F  3000               	movlw	0
  1767  04A0  07CD               	addwf	num@i+1,f
  1768  04A1  084D               	movf	num@i+1,w
  1769  04A2  3A80               	xorlw	128
  1770  04A3  00FF               	movwf	127
  1771  04A4  3080               	movlw	128
  1772  04A5  027F               	subwf	127,w
  1773  04A6  1D03               	skipz
  1774  04A7  2CAA               	goto	u555
  1775  04A8  3014               	movlw	20
  1776  04A9  024C               	subwf	num@i,w
  1777  04AA                     u555:
  1778  04AA  1C03               	skipc
  1779  04AB  2C53               	goto	l1255
  1780                           
  1781                           ;nb.c: 151: };nb.c: 153: val=somme/20;
  1782  04AC  3000               	movlw	0
  1783  04AD  00F3               	movwf	___lldiv@divisor+3
  1784  04AE  3000               	movlw	0
  1785  04AF  00F2               	movwf	___lldiv@divisor+2
  1786  04B0  3000               	movlw	0
  1787  04B1  00F1               	movwf	___lldiv@divisor+1
  1788  04B2  3014               	movlw	20
  1789  04B3  00F0               	movwf	___lldiv@divisor
  1790  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  1791  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  1792  04B6  082B               	movf	_somme+3,w
  1793  04B7  00F7               	movwf	___lldiv@dividend+3
  1794  04B8  082A               	movf	_somme+2,w
  1795  04B9  00F6               	movwf	___lldiv@dividend+2
  1796  04BA  0829               	movf	_somme+1,w
  1797  04BB  00F5               	movwf	___lldiv@dividend+1
  1798  04BC  0828               	movf	_somme,w
  1799  04BD  00F4               	movwf	___lldiv@dividend
  1800  04BE  120A  118A  228F   	fcall	___lldiv
  1801  04C1  0871               	movf	?___lldiv+1,w
  1802  04C2  00BB               	movwf	_val+1	;volatile
  1803  04C3  0870               	movf	?___lldiv,w
  1804  04C4  00BA               	movwf	_val	;volatile
  1805  04C5  0008               	return
  1806  04C6                     __end_of_num:
  1807                           
  1808                           	psect	text7
  1809  01F5                     __ptext7:	
  1810 ;; *************** function _ADC_Read1 *****************
  1811 ;; Defined at:
  1812 ;;		line 55 in file "nb.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  channel         2    0[COMMON] unsigned int 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;		None
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  2    0[COMMON] unsigned int 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 300/0
  1823 ;;		On exit  : 200/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         2       0       0       0       0
  1827 ;;      Locals:         0       0       0       0       0
  1828 ;;      Temps:          2       0       0       0       0
  1829 ;;      Totals:         4       0       0       0       0
  1830 ;;Total ram usage:        4 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_num
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           
  1840                           ;psect for function _ADC_Read1
  1841  01F5                     _ADC_Read1:
  1842                           
  1843                           ;nb.c: 57: if(channel > 7)
  1844                           
  1845                           ;incstack = 0
  1846                           ; Regs used in _ADC_Read1: [wreg+status,2+status,0]
  1847  01F5  3000               	movlw	0
  1848  01F6  0271               	subwf	ADC_Read1@channel+1,w
  1849  01F7  3008               	movlw	8
  1850  01F8  1903               	skipnz
  1851  01F9  0270               	subwf	ADC_Read1@channel,w
  1852  01FA  1C03               	skipc
  1853  01FB  29FF               	goto	l1121
  1854                           
  1855                           ;nb.c: 58: return 0;
  1856  01FC  01F0               	clrf	?_ADC_Read1
  1857  01FD  01F1               	clrf	?_ADC_Read1+1
  1858  01FE  0008               	return
  1859  01FF                     l1121:
  1860                           
  1861                           ;nb.c: 60: ADCON0 &= 0x85;
  1862  01FF  3085               	movlw	133
  1863  0200  00F2               	movwf	??_ADC_Read1
  1864  0201  0872               	movf	??_ADC_Read1,w
  1865  0202  059F               	andwf	31,f	;volatile
  1866                           
  1867                           ;nb.c: 61: ADCON0 |= channel<<3;
  1868  0203  0870               	movf	ADC_Read1@channel,w
  1869  0204  00F2               	movwf	??_ADC_Read1
  1870  0205  3002               	movlw	2
  1871  0206                     u365:
  1872  0206  1003               	clrc
  1873  0207  0DF2               	rlf	??_ADC_Read1,f
  1874  0208  3EFF               	addlw	-1
  1875  0209  1D03               	skipz
  1876  020A  2A06               	goto	u365
  1877  020B  1003               	clrc
  1878  020C  0D72               	rlf	??_ADC_Read1,w
  1879  020D  00F3               	movwf	??_ADC_Read1+1
  1880  020E  0873               	movf	??_ADC_Read1+1,w
  1881  020F  049F               	iorwf	31,f	;volatile
  1882                           
  1883                           ;nb.c: 62: ADCON1=0x81;
  1884  0210  3081               	movlw	129
  1885  0211  1683               	bsf	3,5	;RP0=1, select bank1
  1886  0212  009F               	movwf	31	;volatile
  1887                           
  1888                           ;nb.c: 65: _delay((unsigned long)((2)*(4000000/4000.0)));
  1889  0213  3003               	movlw	3
  1890  0214  00F3               	movwf	??_ADC_Read1+1
  1891  0215  3097               	movlw	151
  1892  0216  00F2               	movwf	??_ADC_Read1
  1893  0217                     u997:
  1894  0217  0BF2               	decfsz	??_ADC_Read1,f
  1895  0218  2A17               	goto	u997
  1896  0219  0BF3               	decfsz	??_ADC_Read1+1,f
  1897  021A  2A17               	goto	u997
  1898  021B  2A1C               	nop2
  1899                           
  1900                           ;nb.c: 66: GO_nDONE = 1;
  1901  021C  1283               	bcf	3,5	;RP0=0, select bank0
  1902  021D  1303               	bcf	3,6	;RP1=0, select bank0
  1903  021E  151F               	bsf	31,2	;volatile
  1904  021F                     l107:	
  1905                           ;nb.c: 67: while(GO_nDONE);
  1906                           
  1907  021F  191F               	btfsc	31,2	;volatile
  1908  0220  2A1F               	goto	l107
  1909                           
  1910                           ;nb.c: 68: return ((ADRESH<<8)+ADRESL);
  1911  0221  081E               	movf	30,w	;volatile
  1912  0222  00F1               	movwf	?_ADC_Read1+1
  1913  0223  1683               	bsf	3,5	;RP0=1, select bank1
  1914  0224  081E               	movf	30,w	;volatile
  1915  0225  00F0               	movwf	?_ADC_Read1
  1916  0226  0008               	return
  1917  0227                     __end_of_ADC_Read1:
  1918                           
  1919                           	psect	text8
  1920  03D2                     __ptext8:	
  1921 ;; *************** function _aver *****************
  1922 ;; Defined at:
  1923 ;;		line 104 in file "nb.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;		None
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  i               2   11[BANK0 ] int 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 300/100
  1934 ;;		On exit  : 300/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1937 ;;      Params:         0       0       0       0       0
  1938 ;;      Locals:         0       2       0       0       0
  1939 ;;      Temps:          0      11       0       0       0
  1940 ;;      Totals:         0      13       0       0       0
  1941 ;;Total ram usage:       13 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; Hardware stack levels required when called:    1
  1944 ;; This function calls:
  1945 ;;		___lldiv
  1946 ;; This function is called by:
  1947 ;;		_ADC2
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           
  1952                           ;psect for function _aver
  1953  03D2                     _aver:
  1954                           
  1955                           ;nb.c: 105: co=0;
  1956                           
  1957                           ;incstack = 0
  1958                           ; Regs used in _aver: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1959  03D2  3000               	movlw	0
  1960  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  1961  03D4  00A3               	movwf	_co+3
  1962  03D5  3000               	movlw	0
  1963  03D6  00A2               	movwf	_co+2
  1964  03D7  3000               	movlw	0
  1965  03D8  00A1               	movwf	_co+1
  1966  03D9  3000               	movlw	0
  1967  03DA  00A0               	movwf	_co
  1968                           
  1969                           ;nb.c: 106: temp=0;
  1970  03DB  01B2               	clrf	_temp
  1971  03DC  01B3               	clrf	_temp+1
  1972                           
  1973                           ;nb.c: 107: for(int i=0;i<10;i++){
  1974  03DD  01CF               	clrf	aver@i
  1975  03DE  01D0               	clrf	aver@i+1
  1976  03DF                     l1235:
  1977                           
  1978                           ;nb.c: 108: co = co+acc[i];
  1979  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  1980  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  1981  03E1  0820               	movf	_co,w
  1982  03E2  00C4               	movwf	??_aver
  1983  03E3  0821               	movf	_co+1,w
  1984  03E4  00C5               	movwf	??_aver+1
  1985  03E5  0822               	movf	_co+2,w
  1986  03E6  00C6               	movwf	??_aver+2
  1987  03E7  0823               	movf	_co+3,w
  1988  03E8  00C7               	movwf	??_aver+3
  1989  03E9  084F               	movf	aver@i,w
  1990  03EA  00C8               	movwf	??_aver+4
  1991  03EB  0748               	addwf	??_aver+4,w
  1992  03EC  3EDC               	addlw	(low (_acc| 0))& (0+255)
  1993  03ED  0084               	movwf	4
  1994  03EE  1383               	bcf	3,7	;select IRP bank1
  1995  03EF  0800               	movf	0,w
  1996  03F0  00C9               	movwf	??_aver+5
  1997  03F1  0A84               	incf	4,f
  1998  03F2  0800               	movf	0,w
  1999  03F3  00CA               	movwf	??_aver+6
  2000  03F4  0849               	movf	??_aver+5,w
  2001  03F5  00CB               	movwf	??_aver+7
  2002  03F6  084A               	movf	??_aver+6,w
  2003  03F7  00CC               	movwf	??_aver+8
  2004  03F8  01CD               	clrf	??_aver+9
  2005  03F9  01CE               	clrf	??_aver+10
  2006  03FA  084B               	movf	??_aver+7,w
  2007  03FB  07C4               	addwf	??_aver,f
  2008  03FC  084C               	movf	??_aver+8,w
  2009  03FD  1803               	skipnc
  2010  03FE  0F4C               	incfsz	??_aver+8,w
  2011  03FF  2C01               	goto	u520
  2012  0400  2C02               	goto	u521
  2013  0401                     u520:
  2014  0401  07C5               	addwf	??_aver+1,f
  2015  0402                     u521:
  2016  0402  084D               	movf	??_aver+9,w
  2017  0403  1803               	skipnc
  2018  0404  0F4D               	incfsz	??_aver+9,w
  2019  0405  2C07               	goto	u522
  2020  0406  2C08               	goto	u523
  2021  0407                     u522:
  2022  0407  07C6               	addwf	??_aver+2,f
  2023  0408                     u523:
  2024  0408  084E               	movf	??_aver+10,w
  2025  0409  1803               	skipnc
  2026  040A  0A4E               	incf	??_aver+10,w
  2027  040B  07C7               	addwf	??_aver+3,f
  2028  040C  0847               	movf	??_aver+3,w
  2029  040D  00A3               	movwf	_co+3
  2030  040E  0846               	movf	??_aver+2,w
  2031  040F  00A2               	movwf	_co+2
  2032  0410  0845               	movf	??_aver+1,w
  2033  0411  00A1               	movwf	_co+1
  2034  0412  0844               	movf	??_aver,w
  2035  0413  00A0               	movwf	_co
  2036  0414  3001               	movlw	1
  2037  0415  07CF               	addwf	aver@i,f
  2038  0416  1803               	skipnc
  2039  0417  0AD0               	incf	aver@i+1,f
  2040  0418  3000               	movlw	0
  2041  0419  07D0               	addwf	aver@i+1,f
  2042  041A  0850               	movf	aver@i+1,w
  2043  041B  3A80               	xorlw	128
  2044  041C  00FF               	movwf	127
  2045  041D  3080               	movlw	128
  2046  041E  027F               	subwf	127,w
  2047  041F  1D03               	skipz
  2048  0420  2C23               	goto	u535
  2049  0421  300A               	movlw	10
  2050  0422  024F               	subwf	aver@i,w
  2051  0423                     u535:
  2052  0423  1C03               	skipc
  2053  0424  2BDF               	goto	l1235
  2054                           
  2055                           ;nb.c: 109: };nb.c: 110: courant=co/10;
  2056  0425  3000               	movlw	0
  2057  0426  00F3               	movwf	___lldiv@divisor+3
  2058  0427  3000               	movlw	0
  2059  0428  00F2               	movwf	___lldiv@divisor+2
  2060  0429  3000               	movlw	0
  2061  042A  00F1               	movwf	___lldiv@divisor+1
  2062  042B  300A               	movlw	10
  2063  042C  00F0               	movwf	___lldiv@divisor
  2064  042D  1283               	bcf	3,5	;RP0=0, select bank0
  2065  042E  1303               	bcf	3,6	;RP1=0, select bank0
  2066  042F  0823               	movf	_co+3,w
  2067  0430  00F7               	movwf	___lldiv@dividend+3
  2068  0431  0822               	movf	_co+2,w
  2069  0432  00F6               	movwf	___lldiv@dividend+2
  2070  0433  0821               	movf	_co+1,w
  2071  0434  00F5               	movwf	___lldiv@dividend+1
  2072  0435  0820               	movf	_co,w
  2073  0436  00F4               	movwf	___lldiv@dividend
  2074  0437  120A  118A  228F   	fcall	___lldiv
  2075  043A  0871               	movf	?___lldiv+1,w
  2076  043B  00AF               	movwf	_courant+1
  2077  043C  0870               	movf	?___lldiv,w
  2078  043D  00AE               	movwf	_courant
  2079                           
  2080                           ;nb.c: 112: currentL=courant;
  2081  043E  082E               	movf	_courant,w
  2082  043F  00C4               	movwf	??_aver
  2083  0440  0844               	movf	??_aver,w
  2084  0441  00BE               	movwf	_currentL
  2085                           
  2086                           ;nb.c: 115: currentH=courant>>8;
  2087  0442  082F               	movf	_courant+1,w
  2088  0443  00C4               	movwf	??_aver
  2089  0444  0844               	movf	??_aver,w
  2090  0445  00BF               	movwf	_currentH
  2091  0446  0008               	return
  2092  0447                     __end_of_aver:
  2093                           
  2094                           	psect	text9
  2095  025B                     __ptext9:	
  2096 ;; *************** function _Shi *****************
  2097 ;; Defined at:
  2098 ;;		line 93 in file "nb.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  i               2    4[COMMON] int 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2107 ;; Tracked objects:
  2108 ;;		On entry : 300/0
  2109 ;;		On exit  : 300/100
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2112 ;;      Params:         0       0       0       0       0
  2113 ;;      Locals:         2       0       0       0       0
  2114 ;;      Temps:          4       0       0       0       0
  2115 ;;      Totals:         6       0       0       0       0
  2116 ;;Total ram usage:        6 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_ADC2
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           
  2126                           ;psect for function _Shi
  2127  025B                     _Shi:
  2128                           
  2129                           ;nb.c: 95: k=0;
  2130                           
  2131                           ;incstack = 0
  2132                           ; Regs used in _Shi: [wreg-fsr0h+status,2+status,0+btemp+1]
  2133  025B  01B0               	clrf	_k
  2134  025C  01B1               	clrf	_k+1
  2135                           
  2136                           ;nb.c: 96: for(int i=0;i<9;i++){
  2137  025D  01F4               	clrf	Shi@i
  2138  025E  01F5               	clrf	Shi@i+1
  2139  025F                     l1217:
  2140                           
  2141                           ;nb.c: 97: acc[i]= acc[i+1];
  2142  025F  0874               	movf	Shi@i,w
  2143  0260  00F0               	movwf	??_Shi
  2144  0261  0770               	addwf	??_Shi,w
  2145  0262  3EDE               	addlw	(low ((_acc| 0+2)))& (0+255)
  2146  0263  0084               	movwf	4
  2147  0264  1383               	bcf	3,7	;select IRP bank1
  2148  0265  0800               	movf	0,w
  2149  0266  00F1               	movwf	??_Shi+1
  2150  0267  0A84               	incf	4,f
  2151  0268  0800               	movf	0,w
  2152  0269  00F2               	movwf	??_Shi+2
  2153  026A  0874               	movf	Shi@i,w
  2154  026B  00F3               	movwf	??_Shi+3
  2155  026C  0773               	addwf	??_Shi+3,w
  2156  026D  3EDC               	addlw	(low (_acc| 0))& (0+255)
  2157  026E  0084               	movwf	4
  2158  026F  0871               	movf	??_Shi+1,w
  2159  0270  0080               	movwf	0
  2160  0271  0A84               	incf	4,f
  2161  0272  0872               	movf	??_Shi+2,w
  2162  0273  0080               	movwf	0
  2163  0274  3001               	movlw	1
  2164  0275  07F4               	addwf	Shi@i,f
  2165  0276  1803               	skipnc
  2166  0277  0AF5               	incf	Shi@i+1,f
  2167  0278  3000               	movlw	0
  2168  0279  07F5               	addwf	Shi@i+1,f
  2169  027A  0875               	movf	Shi@i+1,w
  2170  027B  3A80               	xorlw	128
  2171  027C  00FF               	movwf	127
  2172  027D  3080               	movlw	128
  2173  027E  027F               	subwf	127,w
  2174  027F  1D03               	skipz
  2175  0280  2A83               	goto	u515
  2176  0281  3009               	movlw	9
  2177  0282  0274               	subwf	Shi@i,w
  2178  0283                     u515:
  2179  0283  1C03               	skipc
  2180  0284  2A5F               	goto	l1217
  2181                           
  2182                           ;nb.c: 99: };nb.c: 100: acc[9]=val;
  2183  0285  1283               	bcf	3,5	;RP0=0, select bank0
  2184  0286  1303               	bcf	3,6	;RP1=0, select bank0
  2185  0287  083B               	movf	_val+1,w	;volatile
  2186  0288  1683               	bsf	3,5	;RP0=1, select bank1
  2187  0289  00EF               	movwf	((_acc+1)^(0+128)+18)
  2188  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2189  028B  083A               	movf	_val,w	;volatile
  2190  028C  1683               	bsf	3,5	;RP0=1, select bank1
  2191  028D  00EE               	movwf	(_acc^(0+128)+18)
  2192  028E  0008               	return
  2193  028F                     __end_of_Shi:
  2194                           
  2195                           	psect	text10
  2196  04C6                     __ptext10:	
  2197 ;; *************** function _ADC1 *****************
  2198 ;; Defined at:
  2199 ;;		line 119 in file "nb.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;		None
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  i               2   21[BANK0 ] int 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  1    wreg      void 
  2206 ;; Registers used:
  2207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2208 ;; Tracked objects:
  2209 ;;		On entry : 300/0
  2210 ;;		On exit  : 300/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2213 ;;      Params:         0       0       0       0       0
  2214 ;;      Locals:         0       2       0       0       0
  2215 ;;      Temps:          0       8       0       0       0
  2216 ;;      Totals:         0      10       0       0       0
  2217 ;;Total ram usage:       10 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    2
  2220 ;; This function calls:
  2221 ;;		_ADC_Read
  2222 ;;		_Shift
  2223 ;;		___lldiv
  2224 ;;		_averge
  2225 ;; This function is called by:
  2226 ;;		_main
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           
  2231                           ;psect for function _ADC1
  2232  04C6                     _ADC1:
  2233                           
  2234                           ;nb.c: 122: somme=0;
  2235                           
  2236                           ;incstack = 0
  2237                           ; Regs used in _ADC1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2238  04C6  3000               	movlw	0
  2239  04C7  00AB               	movwf	_somme+3
  2240  04C8  3000               	movlw	0
  2241  04C9  00AA               	movwf	_somme+2
  2242  04CA  3000               	movlw	0
  2243  04CB  00A9               	movwf	_somme+1
  2244  04CC  3000               	movlw	0
  2245  04CD  00A8               	movwf	_somme
  2246                           
  2247                           ;nb.c: 123: c=0;
  2248  04CE  01B6               	clrf	_c
  2249  04CF  01B7               	clrf	_c+1
  2250                           
  2251                           ;nb.c: 126: _delay((unsigned long)((1)*(4000000/4000.0)));
  2252  04D0  30C7               	movlw	199
  2253  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2254  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2255  04D3  00D1               	movwf	??_ADC1
  2256  04D4                     u1007:
  2257  04D4  2CD5               	nop2
  2258  04D5  0BD1               	decfsz	??_ADC1,f
  2259  04D6  2CD4               	goto	u1007
  2260  04D7  2CD8               	nop2
  2261                           
  2262                           ;nb.c: 127: for(int i=0; i<40;i++)
  2263  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2264  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2265  04DA  01D9               	clrf	ADC1@i
  2266  04DB  01DA               	clrf	ADC1@i+1
  2267  04DC                     l1279:
  2268                           
  2269                           ;nb.c: 128: {;nb.c: 129: c=ADC_Read(s);
  2270  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  2271  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  2272  04DE  083D               	movf	_s,w
  2273  04DF  00D1               	movwf	??_ADC1
  2274  04E0  01D2               	clrf	??_ADC1+1
  2275  04E1  0851               	movf	??_ADC1,w
  2276  04E2  00F0               	movwf	ADC_Read@channel
  2277  04E3  0852               	movf	??_ADC1+1,w
  2278  04E4  00F1               	movwf	ADC_Read@channel+1
  2279  04E5  120A  118A  21C3  120A  118A  	fcall	_ADC_Read
  2280  04EA  0871               	movf	?_ADC_Read+1,w
  2281  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  2282  04EC  00B7               	movwf	_c+1
  2283  04ED  0870               	movf	?_ADC_Read,w
  2284  04EE  00B6               	movwf	_c
  2285                           
  2286                           ;nb.c: 130: _delay((unsigned long)((5)*(4000000/4000.0)));
  2287  04EF  3007               	movlw	7
  2288  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  2289  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  2290  04F2  00D2               	movwf	??_ADC1+1
  2291  04F3  307C               	movlw	124
  2292  04F4  00D1               	movwf	??_ADC1
  2293  04F5                     u1017:
  2294  04F5  0BD1               	decfsz	??_ADC1,f
  2295  04F6  2CF5               	goto	u1017
  2296  04F7  0BD2               	decfsz	??_ADC1+1,f
  2297  04F8  2CF5               	goto	u1017
  2298  04F9  0000               	nop
  2299                           
  2300                           ;nb.c: 131: somme=somme+c;
  2301  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  2302  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  2303  04FC  0828               	movf	_somme,w
  2304  04FD  00D1               	movwf	??_ADC1
  2305  04FE  0829               	movf	_somme+1,w
  2306  04FF  00D2               	movwf	??_ADC1+1
  2307  0500  082A               	movf	_somme+2,w
  2308  0501  00D3               	movwf	??_ADC1+2
  2309  0502  082B               	movf	_somme+3,w
  2310  0503  00D4               	movwf	??_ADC1+3
  2311  0504  0836               	movf	_c,w
  2312  0505  00D5               	movwf	??_ADC1+4
  2313  0506  0837               	movf	_c+1,w
  2314  0507  00D6               	movwf	??_ADC1+5
  2315  0508  01D7               	clrf	??_ADC1+6
  2316  0509  01D8               	clrf	??_ADC1+7
  2317  050A  0855               	movf	??_ADC1+4,w
  2318  050B  07D1               	addwf	??_ADC1,f
  2319  050C  0856               	movf	??_ADC1+5,w
  2320  050D  1803               	skipnc
  2321  050E  0F56               	incfsz	??_ADC1+5,w
  2322  050F  2D11               	goto	u560
  2323  0510  2D12               	goto	u561
  2324  0511                     u560:
  2325  0511  07D2               	addwf	??_ADC1+1,f
  2326  0512                     u561:
  2327  0512  0857               	movf	??_ADC1+6,w
  2328  0513  1803               	skipnc
  2329  0514  0F57               	incfsz	??_ADC1+6,w
  2330  0515  2D17               	goto	u562
  2331  0516  2D18               	goto	u563
  2332  0517                     u562:
  2333  0517  07D3               	addwf	??_ADC1+2,f
  2334  0518                     u563:
  2335  0518  0858               	movf	??_ADC1+7,w
  2336  0519  1803               	skipnc
  2337  051A  0A58               	incf	??_ADC1+7,w
  2338  051B  07D4               	addwf	??_ADC1+3,f
  2339  051C  0854               	movf	??_ADC1+3,w
  2340  051D  00AB               	movwf	_somme+3
  2341  051E  0853               	movf	??_ADC1+2,w
  2342  051F  00AA               	movwf	_somme+2
  2343  0520  0852               	movf	??_ADC1+1,w
  2344  0521  00A9               	movwf	_somme+1
  2345  0522  0851               	movf	??_ADC1,w
  2346  0523  00A8               	movwf	_somme
  2347  0524  3001               	movlw	1
  2348  0525  07D9               	addwf	ADC1@i,f
  2349  0526  1803               	skipnc
  2350  0527  0ADA               	incf	ADC1@i+1,f
  2351  0528  3000               	movlw	0
  2352  0529  07DA               	addwf	ADC1@i+1,f
  2353  052A  085A               	movf	ADC1@i+1,w
  2354  052B  3A80               	xorlw	128
  2355  052C  00FF               	movwf	127
  2356  052D  3080               	movlw	128
  2357  052E  027F               	subwf	127,w
  2358  052F  1D03               	skipz
  2359  0530  2D33               	goto	u575
  2360  0531  3028               	movlw	40
  2361  0532  0259               	subwf	ADC1@i,w
  2362  0533                     u575:
  2363  0533  1C03               	skipc
  2364  0534  2CDC               	goto	l1279
  2365                           
  2366                           ;nb.c: 134: };nb.c: 135: value=somme/40;
  2367  0535  3000               	movlw	0
  2368  0536  00F3               	movwf	___lldiv@divisor+3
  2369  0537  3000               	movlw	0
  2370  0538  00F2               	movwf	___lldiv@divisor+2
  2371  0539  3000               	movlw	0
  2372  053A  00F1               	movwf	___lldiv@divisor+1
  2373  053B  3028               	movlw	40
  2374  053C  00F0               	movwf	___lldiv@divisor
  2375  053D  1283               	bcf	3,5	;RP0=0, select bank0
  2376  053E  1303               	bcf	3,6	;RP1=0, select bank0
  2377  053F  082B               	movf	_somme+3,w
  2378  0540  00F7               	movwf	___lldiv@dividend+3
  2379  0541  082A               	movf	_somme+2,w
  2380  0542  00F6               	movwf	___lldiv@dividend+2
  2381  0543  0829               	movf	_somme+1,w
  2382  0544  00F5               	movwf	___lldiv@dividend+1
  2383  0545  0828               	movf	_somme,w
  2384  0546  00F4               	movwf	___lldiv@dividend
  2385  0547  120A  118A  228F  120A  118A  	fcall	___lldiv
  2386  054C  0871               	movf	?___lldiv+1,w
  2387  054D  00B5               	movwf	_value+1
  2388  054E  0870               	movf	?___lldiv,w
  2389  054F  00B4               	movwf	_value
  2390                           
  2391                           ;nb.c: 136: Shift();
  2392  0550  120A  118A  2227  120A  118A  	fcall	_Shift
  2393                           
  2394                           ;nb.c: 137: averge();
  2395  0555  120A  118A  235D   	fcall	_averge
  2396                           
  2397                           ;nb.c: 138: somme=0;
  2398  0558  3000               	movlw	0
  2399  0559  00AB               	movwf	_somme+3
  2400  055A  3000               	movlw	0
  2401  055B  00AA               	movwf	_somme+2
  2402  055C  3000               	movlw	0
  2403  055D  00A9               	movwf	_somme+1
  2404  055E  3000               	movlw	0
  2405  055F  00A8               	movwf	_somme
  2406  0560  0008               	return
  2407  0561                     __end_of_ADC1:
  2408                           
  2409                           	psect	text11
  2410  035D                     __ptext11:	
  2411 ;; *************** function _averge *****************
  2412 ;; Defined at:
  2413 ;;		line 81 in file "nb.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;		None
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  i               2   11[BANK0 ] int 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 300/100
  2424 ;;		On exit  : 300/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2427 ;;      Params:         0       0       0       0       0
  2428 ;;      Locals:         0       2       0       0       0
  2429 ;;      Temps:          0      11       0       0       0
  2430 ;;      Totals:         0      13       0       0       0
  2431 ;;Total ram usage:       13 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    1
  2434 ;; This function calls:
  2435 ;;		___lldiv
  2436 ;; This function is called by:
  2437 ;;		_ADC1
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           
  2442                           ;psect for function _averge
  2443  035D                     _averge:
  2444                           
  2445                           ;nb.c: 82: av=0;
  2446                           
  2447                           ;incstack = 0
  2448                           ; Regs used in _averge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2449  035D  3000               	movlw	0
  2450  035E  1283               	bcf	3,5	;RP0=0, select bank0
  2451  035F  00A7               	movwf	_av+3
  2452  0360  3000               	movlw	0
  2453  0361  00A6               	movwf	_av+2
  2454  0362  3000               	movlw	0
  2455  0363  00A5               	movwf	_av+1
  2456  0364  3000               	movlw	0
  2457  0365  00A4               	movwf	_av
  2458                           
  2459                           ;nb.c: 83: temp=0;
  2460  0366  01B2               	clrf	_temp
  2461  0367  01B3               	clrf	_temp+1
  2462                           
  2463                           ;nb.c: 84: for(int i=0;i<30;i++){
  2464  0368  01CF               	clrf	averge@i
  2465  0369  01D0               	clrf	averge@i+1
  2466  036A                     l1199:
  2467                           
  2468                           ;nb.c: 85: av = av+data[i];
  2469  036A  1283               	bcf	3,5	;RP0=0, select bank0
  2470  036B  1303               	bcf	3,6	;RP1=0, select bank0
  2471  036C  0824               	movf	_av,w
  2472  036D  00C4               	movwf	??_averge
  2473  036E  0825               	movf	_av+1,w
  2474  036F  00C5               	movwf	??_averge+1
  2475  0370  0826               	movf	_av+2,w
  2476  0371  00C6               	movwf	??_averge+2
  2477  0372  0827               	movf	_av+3,w
  2478  0373  00C7               	movwf	??_averge+3
  2479  0374  084F               	movf	averge@i,w
  2480  0375  00C8               	movwf	??_averge+4
  2481  0376  0748               	addwf	??_averge+4,w
  2482  0377  3EA0               	addlw	(low (_data| 0))& (0+255)
  2483  0378  0084               	movwf	4
  2484  0379  1383               	bcf	3,7	;select IRP bank1
  2485  037A  0800               	movf	0,w
  2486  037B  00C9               	movwf	??_averge+5
  2487  037C  0A84               	incf	4,f
  2488  037D  0800               	movf	0,w
  2489  037E  00CA               	movwf	??_averge+6
  2490  037F  0849               	movf	??_averge+5,w
  2491  0380  00CB               	movwf	??_averge+7
  2492  0381  084A               	movf	??_averge+6,w
  2493  0382  00CC               	movwf	??_averge+8
  2494  0383  01CD               	clrf	??_averge+9
  2495  0384  01CE               	clrf	??_averge+10
  2496  0385  084B               	movf	??_averge+7,w
  2497  0386  07C4               	addwf	??_averge,f
  2498  0387  084C               	movf	??_averge+8,w
  2499  0388  1803               	skipnc
  2500  0389  0F4C               	incfsz	??_averge+8,w
  2501  038A  2B8C               	goto	u490
  2502  038B  2B8D               	goto	u491
  2503  038C                     u490:
  2504  038C  07C5               	addwf	??_averge+1,f
  2505  038D                     u491:
  2506  038D  084D               	movf	??_averge+9,w
  2507  038E  1803               	skipnc
  2508  038F  0F4D               	incfsz	??_averge+9,w
  2509  0390  2B92               	goto	u492
  2510  0391  2B93               	goto	u493
  2511  0392                     u492:
  2512  0392  07C6               	addwf	??_averge+2,f
  2513  0393                     u493:
  2514  0393  084E               	movf	??_averge+10,w
  2515  0394  1803               	skipnc
  2516  0395  0A4E               	incf	??_averge+10,w
  2517  0396  07C7               	addwf	??_averge+3,f
  2518  0397  0847               	movf	??_averge+3,w
  2519  0398  00A7               	movwf	_av+3
  2520  0399  0846               	movf	??_averge+2,w
  2521  039A  00A6               	movwf	_av+2
  2522  039B  0845               	movf	??_averge+1,w
  2523  039C  00A5               	movwf	_av+1
  2524  039D  0844               	movf	??_averge,w
  2525  039E  00A4               	movwf	_av
  2526  039F  3001               	movlw	1
  2527  03A0  07CF               	addwf	averge@i,f
  2528  03A1  1803               	skipnc
  2529  03A2  0AD0               	incf	averge@i+1,f
  2530  03A3  3000               	movlw	0
  2531  03A4  07D0               	addwf	averge@i+1,f
  2532  03A5  0850               	movf	averge@i+1,w
  2533  03A6  3A80               	xorlw	128
  2534  03A7  00FF               	movwf	127
  2535  03A8  3080               	movlw	128
  2536  03A9  027F               	subwf	127,w
  2537  03AA  1D03               	skipz
  2538  03AB  2BAE               	goto	u505
  2539  03AC  301E               	movlw	30
  2540  03AD  024F               	subwf	averge@i,w
  2541  03AE                     u505:
  2542  03AE  1C03               	skipc
  2543  03AF  2B6A               	goto	l1199
  2544                           
  2545                           ;nb.c: 86: };nb.c: 87: temp=av/30;
  2546  03B0  3000               	movlw	0
  2547  03B1  00F3               	movwf	___lldiv@divisor+3
  2548  03B2  3000               	movlw	0
  2549  03B3  00F2               	movwf	___lldiv@divisor+2
  2550  03B4  3000               	movlw	0
  2551  03B5  00F1               	movwf	___lldiv@divisor+1
  2552  03B6  301E               	movlw	30
  2553  03B7  00F0               	movwf	___lldiv@divisor
  2554  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  2555  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  2556  03BA  0827               	movf	_av+3,w
  2557  03BB  00F7               	movwf	___lldiv@dividend+3
  2558  03BC  0826               	movf	_av+2,w
  2559  03BD  00F6               	movwf	___lldiv@dividend+2
  2560  03BE  0825               	movf	_av+1,w
  2561  03BF  00F5               	movwf	___lldiv@dividend+1
  2562  03C0  0824               	movf	_av,w
  2563  03C1  00F4               	movwf	___lldiv@dividend
  2564  03C2  120A  118A  228F   	fcall	___lldiv
  2565  03C5  0871               	movf	?___lldiv+1,w
  2566  03C6  00B3               	movwf	_temp+1
  2567  03C7  0870               	movf	?___lldiv,w
  2568  03C8  00B2               	movwf	_temp
  2569                           
  2570                           ;nb.c: 88: tempL=temp;
  2571  03C9  0832               	movf	_temp,w
  2572  03CA  00C4               	movwf	??_averge
  2573  03CB  0844               	movf	??_averge,w
  2574  03CC  00C0               	movwf	_tempL
  2575                           
  2576                           ;nb.c: 90: tempH=temp>>8;
  2577  03CD  0833               	movf	_temp+1,w
  2578  03CE  00C4               	movwf	??_averge
  2579  03CF  0844               	movf	??_averge,w
  2580  03D0  00C1               	movwf	_tempH
  2581  03D1  0008               	return
  2582  03D2                     __end_of_averge:
  2583                           
  2584                           	psect	text12
  2585  028F                     __ptext12:	
  2586 ;; *************** function ___lldiv *****************
  2587 ;; Defined at:
  2588 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\__lldiv.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  divisor         4    0[COMMON] unsigned long 
  2591 ;;  dividend        4    4[COMMON] unsigned long 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  quotient        4    9[COMMON] unsigned long 
  2594 ;;  counter         1   13[COMMON] unsigned char 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  4    0[COMMON] unsigned long 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0
  2599 ;; Tracked objects:
  2600 ;;		On entry : 300/0
  2601 ;;		On exit  : 300/0
  2602 ;;		Unchanged: 300/0
  2603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2604 ;;      Params:         8       0       0       0       0
  2605 ;;      Locals:         5       0       0       0       0
  2606 ;;      Temps:          1       0       0       0       0
  2607 ;;      Totals:        14       0       0       0       0
  2608 ;;Total ram usage:       14 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_averge
  2614 ;;		_aver
  2615 ;;		_ADC1
  2616 ;;		_num
  2617 ;;		_ADC3
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           
  2622                           ;psect for function ___lldiv
  2623  028F                     ___lldiv:
  2624                           
  2625                           ;incstack = 0
  2626                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2627  028F  3000               	movlw	0
  2628  0290  00FC               	movwf	___lldiv@quotient+3
  2629  0291  3000               	movlw	0
  2630  0292  00FB               	movwf	___lldiv@quotient+2
  2631  0293  3000               	movlw	0
  2632  0294  00FA               	movwf	___lldiv@quotient+1
  2633  0295  3000               	movlw	0
  2634  0296  00F9               	movwf	___lldiv@quotient
  2635  0297  0873               	movf	___lldiv@divisor+3,w
  2636  0298  0472               	iorwf	___lldiv@divisor+2,w
  2637  0299  0471               	iorwf	___lldiv@divisor+1,w
  2638  029A  0470               	iorwf	___lldiv@divisor,w
  2639  029B  1903               	skipnz
  2640  029C  2AE4               	goto	l1153
  2641  029D  01FD               	clrf	___lldiv@counter
  2642  029E  0AFD               	incf	___lldiv@counter,f
  2643  029F                     l1139:
  2644  029F  1BF3               	btfsc	___lldiv@divisor+3,7
  2645  02A0  2AAF               	goto	l1141
  2646  02A1  3001               	movlw	1
  2647  02A2  00F8               	movwf	??___lldiv
  2648  02A3                     u395:
  2649  02A3  1003               	clrc
  2650  02A4  0DF0               	rlf	___lldiv@divisor,f
  2651  02A5  0DF1               	rlf	___lldiv@divisor+1,f
  2652  02A6  0DF2               	rlf	___lldiv@divisor+2,f
  2653  02A7  0DF3               	rlf	___lldiv@divisor+3,f
  2654  02A8  0BF8               	decfsz	??___lldiv,f
  2655  02A9  2AA3               	goto	u395
  2656  02AA  3001               	movlw	1
  2657  02AB  00F8               	movwf	??___lldiv
  2658  02AC  0878               	movf	??___lldiv,w
  2659  02AD  07FD               	addwf	___lldiv@counter,f
  2660  02AE  2A9F               	goto	l1139
  2661  02AF                     l1141:
  2662  02AF  3001               	movlw	1
  2663  02B0  00F8               	movwf	??___lldiv
  2664  02B1                     u415:
  2665  02B1  1003               	clrc
  2666  02B2  0DF9               	rlf	___lldiv@quotient,f
  2667  02B3  0DFA               	rlf	___lldiv@quotient+1,f
  2668  02B4  0DFB               	rlf	___lldiv@quotient+2,f
  2669  02B5  0DFC               	rlf	___lldiv@quotient+3,f
  2670  02B6  0BF8               	decfsz	??___lldiv,f
  2671  02B7  2AB1               	goto	u415
  2672  02B8  0873               	movf	___lldiv@divisor+3,w
  2673  02B9  0277               	subwf	___lldiv@dividend+3,w
  2674  02BA  1D03               	skipz
  2675  02BB  2AC6               	goto	u425
  2676  02BC  0872               	movf	___lldiv@divisor+2,w
  2677  02BD  0276               	subwf	___lldiv@dividend+2,w
  2678  02BE  1D03               	skipz
  2679  02BF  2AC6               	goto	u425
  2680  02C0  0871               	movf	___lldiv@divisor+1,w
  2681  02C1  0275               	subwf	___lldiv@dividend+1,w
  2682  02C2  1D03               	skipz
  2683  02C3  2AC6               	goto	u425
  2684  02C4  0870               	movf	___lldiv@divisor,w
  2685  02C5  0274               	subwf	___lldiv@dividend,w
  2686  02C6                     u425:
  2687  02C6  1C03               	skipc
  2688  02C7  2AD7               	goto	l1149
  2689  02C8  0870               	movf	___lldiv@divisor,w
  2690  02C9  02F4               	subwf	___lldiv@dividend,f
  2691  02CA  0871               	movf	___lldiv@divisor+1,w
  2692  02CB  1C03               	skipc
  2693  02CC  0F71               	incfsz	___lldiv@divisor+1,w
  2694  02CD  02F5               	subwf	___lldiv@dividend+1,f
  2695  02CE  0872               	movf	___lldiv@divisor+2,w
  2696  02CF  1C03               	skipc
  2697  02D0  0F72               	incfsz	___lldiv@divisor+2,w
  2698  02D1  02F6               	subwf	___lldiv@dividend+2,f
  2699  02D2  0873               	movf	___lldiv@divisor+3,w
  2700  02D3  1C03               	skipc
  2701  02D4  0F73               	incfsz	___lldiv@divisor+3,w
  2702  02D5  02F7               	subwf	___lldiv@dividend+3,f
  2703  02D6  1479               	bsf	___lldiv@quotient,0
  2704  02D7                     l1149:
  2705  02D7  3001               	movlw	1
  2706  02D8                     u435:
  2707  02D8  1003               	clrc
  2708  02D9  0CF3               	rrf	___lldiv@divisor+3,f
  2709  02DA  0CF2               	rrf	___lldiv@divisor+2,f
  2710  02DB  0CF1               	rrf	___lldiv@divisor+1,f
  2711  02DC  0CF0               	rrf	___lldiv@divisor,f
  2712  02DD  3EFF               	addlw	-1
  2713  02DE  1D03               	skipz
  2714  02DF  2AD8               	goto	u435
  2715  02E0  3001               	movlw	1
  2716  02E1  02FD               	subwf	___lldiv@counter,f
  2717  02E2  1D03               	btfss	3,2
  2718  02E3  2AAF               	goto	l1141
  2719  02E4                     l1153:
  2720  02E4  087C               	movf	___lldiv@quotient+3,w
  2721  02E5  00F3               	movwf	?___lldiv+3
  2722  02E6  087B               	movf	___lldiv@quotient+2,w
  2723  02E7  00F2               	movwf	?___lldiv+2
  2724  02E8  087A               	movf	___lldiv@quotient+1,w
  2725  02E9  00F1               	movwf	?___lldiv+1
  2726  02EA  0879               	movf	___lldiv@quotient,w
  2727  02EB  00F0               	movwf	?___lldiv
  2728  02EC  0008               	return
  2729  02ED                     __end_of___lldiv:
  2730                           
  2731                           	psect	text13
  2732  0227                     __ptext13:	
  2733 ;; *************** function _Shift *****************
  2734 ;; Defined at:
  2735 ;;		line 70 in file "nb.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;		None
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  i               2    4[COMMON] int 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2744 ;; Tracked objects:
  2745 ;;		On entry : 300/0
  2746 ;;		On exit  : 300/100
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2749 ;;      Params:         0       0       0       0       0
  2750 ;;      Locals:         2       0       0       0       0
  2751 ;;      Temps:          4       0       0       0       0
  2752 ;;      Totals:         6       0       0       0       0
  2753 ;;Total ram usage:        6 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_ADC1
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function _Shift
  2764  0227                     _Shift:
  2765                           
  2766                           ;nb.c: 72: k=0;
  2767                           
  2768                           ;incstack = 0
  2769                           ; Regs used in _Shift: [wreg-fsr0h+status,2+status,0+btemp+1]
  2770  0227  01B0               	clrf	_k
  2771  0228  01B1               	clrf	_k+1
  2772                           
  2773                           ;nb.c: 73: for(int i=0;i<29;i++){
  2774  0229  01F4               	clrf	Shift@i
  2775  022A  01F5               	clrf	Shift@i+1
  2776  022B                     l1181:
  2777                           
  2778                           ;nb.c: 74: data[i]= data[i+1];
  2779  022B  0874               	movf	Shift@i,w
  2780  022C  00F0               	movwf	??_Shift
  2781  022D  0770               	addwf	??_Shift,w
  2782  022E  3EA2               	addlw	(low ((_data| 0+2)))& (0+255)
  2783  022F  0084               	movwf	4
  2784  0230  1383               	bcf	3,7	;select IRP bank1
  2785  0231  0800               	movf	0,w
  2786  0232  00F1               	movwf	??_Shift+1
  2787  0233  0A84               	incf	4,f
  2788  0234  0800               	movf	0,w
  2789  0235  00F2               	movwf	??_Shift+2
  2790  0236  0874               	movf	Shift@i,w
  2791  0237  00F3               	movwf	??_Shift+3
  2792  0238  0773               	addwf	??_Shift+3,w
  2793  0239  3EA0               	addlw	(low (_data| 0))& (0+255)
  2794  023A  0084               	movwf	4
  2795  023B  0871               	movf	??_Shift+1,w
  2796  023C  0080               	movwf	0
  2797  023D  0A84               	incf	4,f
  2798  023E  0872               	movf	??_Shift+2,w
  2799  023F  0080               	movwf	0
  2800  0240  3001               	movlw	1
  2801  0241  07F4               	addwf	Shift@i,f
  2802  0242  1803               	skipnc
  2803  0243  0AF5               	incf	Shift@i+1,f
  2804  0244  3000               	movlw	0
  2805  0245  07F5               	addwf	Shift@i+1,f
  2806  0246  0875               	movf	Shift@i+1,w
  2807  0247  3A80               	xorlw	128
  2808  0248  00FF               	movwf	127
  2809  0249  3080               	movlw	128
  2810  024A  027F               	subwf	127,w
  2811  024B  1D03               	skipz
  2812  024C  2A4F               	goto	u485
  2813  024D  301D               	movlw	29
  2814  024E  0274               	subwf	Shift@i,w
  2815  024F                     u485:
  2816  024F  1C03               	skipc
  2817  0250  2A2B               	goto	l1181
  2818                           
  2819                           ;nb.c: 76: };nb.c: 77: data[29]=value;
  2820  0251  1283               	bcf	3,5	;RP0=0, select bank0
  2821  0252  1303               	bcf	3,6	;RP1=0, select bank0
  2822  0253  0835               	movf	_value+1,w
  2823  0254  1683               	bsf	3,5	;RP0=1, select bank1
  2824  0255  00DB               	movwf	((_data+1)^(0+128)+58)
  2825  0256  1283               	bcf	3,5	;RP0=0, select bank0
  2826  0257  0834               	movf	_value,w
  2827  0258  1683               	bsf	3,5	;RP0=1, select bank1
  2828  0259  00DA               	movwf	(_data^(0+128)+58)
  2829  025A  0008               	return
  2830  025B                     __end_of_Shift:
  2831                           
  2832                           	psect	text14
  2833  01C3                     __ptext14:	
  2834 ;; *************** function _ADC_Read *****************
  2835 ;; Defined at:
  2836 ;;		line 36 in file "nb.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  channel         2    0[COMMON] unsigned int 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  2    0[COMMON] unsigned int 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0
  2845 ;; Tracked objects:
  2846 ;;		On entry : 300/0
  2847 ;;		On exit  : 200/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2850 ;;      Params:         2       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0
  2852 ;;      Temps:          2       0       0       0       0
  2853 ;;      Totals:         4       0       0       0       0
  2854 ;;Total ram usage:        4 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_ADC1
  2860 ;;		_ADC3
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           
  2865                           ;psect for function _ADC_Read
  2866  01C3                     _ADC_Read:
  2867                           
  2868                           ;nb.c: 38: if(channel > 7)
  2869                           
  2870                           ;incstack = 0
  2871                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  2872  01C3  3000               	movlw	0
  2873  01C4  0271               	subwf	ADC_Read@channel+1,w
  2874  01C5  3008               	movlw	8
  2875  01C6  1903               	skipnz
  2876  01C7  0270               	subwf	ADC_Read@channel,w
  2877  01C8  1C03               	skipc
  2878  01C9  29CD               	goto	l1163
  2879                           
  2880                           ;nb.c: 39: return 0;
  2881  01CA  01F0               	clrf	?_ADC_Read
  2882  01CB  01F1               	clrf	?_ADC_Read+1
  2883  01CC  0008               	return
  2884  01CD                     l1163:
  2885                           
  2886                           ;nb.c: 41: ADCON0 &= 0x85;
  2887  01CD  3085               	movlw	133
  2888  01CE  00F2               	movwf	??_ADC_Read
  2889  01CF  0872               	movf	??_ADC_Read,w
  2890  01D0  059F               	andwf	31,f	;volatile
  2891                           
  2892                           ;nb.c: 42: ADCON0 |= channel<<3;
  2893  01D1  0870               	movf	ADC_Read@channel,w
  2894  01D2  00F2               	movwf	??_ADC_Read
  2895  01D3  3002               	movlw	2
  2896  01D4                     u465:
  2897  01D4  1003               	clrc
  2898  01D5  0DF2               	rlf	??_ADC_Read,f
  2899  01D6  3EFF               	addlw	-1
  2900  01D7  1D03               	skipz
  2901  01D8  29D4               	goto	u465
  2902  01D9  1003               	clrc
  2903  01DA  0D72               	rlf	??_ADC_Read,w
  2904  01DB  00F3               	movwf	??_ADC_Read+1
  2905  01DC  0873               	movf	??_ADC_Read+1,w
  2906  01DD  049F               	iorwf	31,f	;volatile
  2907                           
  2908                           ;nb.c: 43: ADCON1=0x80;
  2909  01DE  3080               	movlw	128
  2910  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  2911  01E0  009F               	movwf	31	;volatile
  2912                           
  2913                           ;nb.c: 46: _delay((unsigned long)((2)*(4000000/4000.0)));
  2914  01E1  3003               	movlw	3
  2915  01E2  00F3               	movwf	??_ADC_Read+1
  2916  01E3  3097               	movlw	151
  2917  01E4  00F2               	movwf	??_ADC_Read
  2918  01E5                     u1027:
  2919  01E5  0BF2               	decfsz	??_ADC_Read,f
  2920  01E6  29E5               	goto	u1027
  2921  01E7  0BF3               	decfsz	??_ADC_Read+1,f
  2922  01E8  29E5               	goto	u1027
  2923  01E9  29EA               	nop2
  2924                           
  2925                           ;nb.c: 47: GO_nDONE = 1;
  2926  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2927  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  2928  01EC  151F               	bsf	31,2	;volatile
  2929  01ED                     l100:	
  2930                           ;nb.c: 48: while(GO_nDONE);
  2931                           
  2932  01ED  191F               	btfsc	31,2	;volatile
  2933  01EE  29ED               	goto	l100
  2934                           
  2935                           ;nb.c: 49: return ((ADRESH<<8)+ADRESL);
  2936  01EF  081E               	movf	30,w	;volatile
  2937  01F0  00F1               	movwf	?_ADC_Read+1
  2938  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  2939  01F2  081E               	movf	30,w	;volatile
  2940  01F3  00F0               	movwf	?_ADC_Read
  2941  01F4  0008               	return
  2942  01F5                     __end_of_ADC_Read:
  2943  007E                     btemp	set	126	;btemp
  2944  007E                     wtemp0	set	126
  2945                           
  2946                           	psect	config
  2947                           
  2948                           ;Config register CONFIG @ 0x2007
  2949                           ;	Oscillator Selection bits
  2950                           ;	FOSC = XT, XT oscillator
  2951                           ;	Watchdog Timer Enable bit
  2952                           ;	WDTE = OFF, WDT disabled
  2953                           ;	Power-up Timer Enable bit
  2954                           ;	PWRTE = ON, PWRT enabled
  2955                           ;	Brown-out Reset Enable bit
  2956                           ;	BOREN = ON, BOR enabled
  2957                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2958                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  2959                           ;	Data EEPROM Memory Code Protection bit
  2960                           ;	CPD = OFF, Data EEPROM code protection off
  2961                           ;	Flash Program Memory Write Enable bits
  2962                           ;	WRT = 0x3, unprogrammed default
  2963                           ;	In-Circuit Debugger Mode bit
  2964                           ;	DEBUG = 0x1, unprogrammed default
  2965                           ;	Flash Program Memory Code Protection bit
  2966                           ;	CP = OFF, Code protection off
  2967  2007                     	org	8199
  2968  2007  3FF1               	dw	16369

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         116
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      62
    BANK1            80      0      80
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ADC3->___lldiv
    _num->___lldiv
    _aver->___lldiv
    _ADC1->___lldiv
    _averge->___lldiv

Critical Paths under _main in BANK0

    _main->_ADC1
    _ADC2->_aver
    _ADC1->_averge

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4333
                                             23 BANK0      3     3      0
                               _ADC1
                               _ADC2
                               _ADC3
                           _ADC_Init
                    _Initialize_UART
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (1) _UART_send_char                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_UART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC3                                                10    10      0     888
                                              0 BANK0     10    10      0
                           _ADC_Read
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _ADC2                                                 1     1      0    1685
                                             13 BANK0      1     1      0
                                _Shi
                               _aver
                                _num
 ---------------------------------------------------------------------------------
 (2) _num                                                 10    10      0     835
                                              0 BANK0     10    10      0
                          _ADC_Read1
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _ADC_Read1                                            4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _aver                                                13    13      0     760
                                              0 BANK0     13    13      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _Shi                                                  6     6      0      90
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _ADC1                                                10    10      0    1738
                                             13 BANK0     10    10      0
                           _ADC_Read
                              _Shift
                            ___lldiv
                             _averge
 ---------------------------------------------------------------------------------
 (2) _averge                                              13    13      0     760
                                              0 BANK0     13    13      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     692
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) _Shift                                                6     6      0      90
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             4     2      2     150
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC1
     _ADC_Read
     _Shift
     ___lldiv
     _averge
       ___lldiv
   _ADC2
     _Shi
     _aver
       ___lldiv
     _num
       _ADC_Read1
       ___lldiv
   _ADC3
     _ADC_Read
     ___lldiv
   _ADC_Init
   _Initialize_UART
   _UART_send_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      9C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      3E       5       77.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      9C      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Jul 27 18:00:24 2021

                       _c 0036                         _k 0030                         _s 003D  
      __size_of_ADC_Read1 0032                        _co 0020                        _av 0024  
                      fsr 0004                       l100 01ED                       l107 021F  
                     _RB0 0030                       u415 02B1                       u520 0401  
                     u425 02C6                       u505 03AE                       u521 0402  
                     u522 0407                       u435 02D8                       u515 0283  
                     u523 0408                       u540 0488                       u365 0206  
                     u541 0489                       u542 048E                       u535 0423  
                     u543 048F                       u560 0511                       u640 05AF  
                     u465 01D4                       u561 0512                       u641 05B0  
                     u490 038C                       u562 0517                       u642 05B5  
                     u395 02A3                       u491 038D                       u563 0518  
                     u555 04AA                       u643 05B6                       u707 0629  
                     u492 0392                       u485 024F                       u493 0393  
                     u717 063C                       u575 0533                       u655 05D1  
                     u807 06D3                       u727 064C                       u665 07D7  
                     u817 06E5                       u737 065C                       u907 0786  
                     u827 06F5                       u747 066E                       u917 0790  
                     u837 0705                       u757 067E                       u927 07A0  
                     u847 0717                       u767 068E                       u937 07B0  
                     u857 0732                       u777 06A0                       u697 0617  
                     _RX9 00C6                       u947 07C2                       u867 0742  
                     u787 06B3                       u957 0571                       u877 0754  
                     u797 06C3                       u967 0593                       u887 0764  
                     u977 044B                       u897 0774                       _TX9 04C6  
                     u987 046C                       u997 0217                       _Shi 025B  
                     _acc 00DC                       _val 003A                       _num 0447  
                     fsr0 0004                       _rpt 0038                       indf 0000  
                    ?_Shi 0070                      l1121 01FF                      l1141 02AF  
                    l1153 02E4                      l1217 025F                      l1163 01CD  
                    l1139 029F                      l1235 03DF                      l1411 0623  
                    l1181 022B                      l1149 02D7                      l1309 030C  
                    l1405 0621                      l1255 0453                      l1319 0326  
                    l1335 034C                      l1351 057A                      l1329 033F  
                    l1523 07E4                      l1199 036A                      l1279 04DC  
                    _ADC1 04C6                      _ADC2 02ED                      _ADC3 0561  
                    ?_num 0070                      _BRGH 04C2                      _CREN 00C4  
                    u1007 04D4                      u1017 04F5                      u1027 01E5  
                    _SPEN 00C7                      _TXEN 04C5                      _SYNC 04C4  
                    Shi@i 0074                      _data 00A0                      _aver 03D2  
                    _main 05FD                      _temp 0032                      btemp 007E  
        __end_of_ADC_Init 01A4          __end_of_ADC_Read 01F5                      num@i 004C  
                    start 0000                     ADC1@i 0059                     ADC3@i 004C  
                   ??_Shi 0070                     ?_ADC1 0070                     ?_ADC2 0070  
                   ?_ADC3 0070                     ??_num 0044                     ?_aver 0070  
                   ?_main 0070           __end_of___lldiv 02ED                     _SPBRG 0099  
                   _PORTB 0006                     _PORTD 0008                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _TRISE 0089                     _TXREG 0019                     _Shift 0227  
                   _check 003C                     _tempH 0041                     _tempL 0040  
                   _value 0034                     aver@i 004F                     _somme 0028  
       __end_of_ADC_Read1 0227                     status 0003                     wtemp0 007E  
            __end_of_ADC1 0561              __end_of_ADC2 035D              __end_of_ADC3 05FD  
         __initialization 07ED              __end_of_aver 0447              __end_of_main 07ED  
                  ??_ADC1 0051                    ??_ADC2 0051                    ??_ADC3 0044  
                  ??_aver 0044                    ??_main 005B                    ?_Shift 0070  
                  _ADCON0 001F                    _ADCON1 009F                    _ADRESH 001E  
                  _ADRESL 009E                    _TRISC6 043E                    _TRISC7 043F  
                  Shift@i 0074                 ??___lldiv 0078                    _averge 035D  
         ADC_Read@channel 0070                 ?_ADC_Init 0070                 ?_ADC_Read 0070  
 __end_of__initialization 07FC            __pcstackCOMMON 0070             __end_of_Shift 025B  
__size_of_Initialize_UART 0011          ADC_Read1@channel 0070                ??_ADC_Init 0070  
              ??_ADC_Read 0072                   ??_Shift 0070                __pbssBANK0 0020  
              __pbssBANK1 00A0                __pmaintext 05FD                   ?_averge 0070  
 __size_of_UART_send_char 0006                 _ADC_Read1 01F5                   ___lldiv 028F  
         __size_of_averge 0075                   __ptext1 01A4                   __ptext2 01B2  
                 __ptext3 019E                   __ptext4 0561                   __ptext5 02ED  
                 __ptext6 0447                   __ptext7 01F5                   __ptext8 03D2  
                 __ptext9 025B                   _courant 002E              __size_of_Shi 0034  
       ??_Initialize_UART 0070              __size_of_num 007F                   _tension 002C  
                 averge@i 004F                   clrloop0 01AB      end_of_initialization 07FC  
              ?_ADC_Read1 0070           ___lldiv@divisor 0070           ___lldiv@counter 007D  
       __size_of_ADC_Init 0006         __size_of_ADC_Read 0032            __end_of_averge 03D2  
     start_initialization 07ED            _UART_send_char 01A4               __end_of_Shi 028F  
             __end_of_num 04C6               ??_ADC_Read1 0072                  ??_averge 0044  
  __end_of_UART_send_char 01AA                 ___latbits 0002             __pcstackBANK0 0044  
         _Initialize_UART 01B2                  ?___lldiv 0070          UART_send_char@bt 0070  
         ?_UART_send_char 0070                  _ADC_Init 019E                  _ADC_Read 01C3  
          __size_of_Shift 0034                 clear_ram0 01AA                  _GO_nDONE 00FA  
 __end_of_Initialize_UART 01C3          __size_of___lldiv 005E                  __ptext10 04C6  
                __ptext11 035D                  __ptext12 028F                  __ptext13 0227  
                __ptext14 01C3             __size_of_ADC1 009B             __size_of_ADC2 0070  
           __size_of_ADC3 009C                  _currentH 003F                  _currentL 003E  
           __size_of_aver 0075             __size_of_main 01F0                  _tensionH 0042  
                _tensionL 0043          ___lldiv@dividend 0074          ?_Initialize_UART 0070  
        ??_UART_send_char 0070          ___lldiv@quotient 0079  
